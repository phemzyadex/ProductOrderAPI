<?xml version="1.0"?>
<doc>
    <assembly>
        <name>xunit.v3.common</name>
    </assembly>
    <members>
        <member name="T:Xunit.Sdk.IMessageSink">
            <summary>
            Represents an endpoint for the reception of test messages.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.IMessageSink.OnMessage(Xunit.Sdk.IMessageSinkMessage)">
            <summary>
            Reports the presence of a message on the message bus. This method should
            never throw exceptions.
            </summary>
            <param name="message">The message from the message bus</param>
            <returns>Return <c>true</c> to continue running tests, or <c>false</c> to stop.</returns>
        </member>
        <member name="T:Xunit.Sdk.IMessageSinkMessage">
            <summary>
            Base interface for all test messages. A test message is a message that is used to communicate
            the status of discovery and/or execution of tests.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestAssemblyMessage">
            <summary>
            Base interface for all messages related to test assemblies.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestAssemblyMessage.AssemblyUniqueID">
            <summary>
            Gets the assembly's unique ID. Can be used to correlate test messages with the appropriate
            assembly that they're related to.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestCaseMessage">
            <summary>
            Base interface for all messages related to test cases.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestCaseMessage.TestCaseUniqueID">
            <summary>
            Gets the test case's unique ID. Can be used to correlate test messages with the appropriate
            test case that they're related to.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestClassMessage">
            <summary>
            Base interface for all messages related to test classes.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestClassMessage.TestClassUniqueID">
            <summary>
            Gets the test class's unique ID. Can be used to correlate test messages with the appropriate
            test class that they're related to. Will be <c>null</c> if the test did not originate from a class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestCollectionMessage">
            <summary>
            Base interface for all messages related to test collections.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestCollectionMessage.TestCollectionUniqueID">
            <summary>
            Gets the test collection's unique ID. Can be used to correlate test messages with the appropriate
            test collection that they're related to.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestMessage">
            <summary>
            Base interface for all messages related to tests.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestMessage.TestUniqueID">
            <summary>
            Gets the test's unique ID. Can be used to correlate test messages with the appropriate
            test that they're related to.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestMethodMessage">
            <summary>
            Base interface for all messages related to test methods.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestMethodMessage.TestMethodUniqueID">
            <summary>
            Gets the test method's unique ID. Can be used to correlate test messages with the appropriate
            test method that they're related to. Will be <c>null</c> if the test did not originate from a method.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestResultMessage">
            <summary>
            Base interface for all individual test results (e.g., tests which pass, fail, skipped, or aren't run).
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestResultMessage.FinishTime">
            <summary>
            Gets the date and time when the test execution finished.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.IAfterTestFinished">
            <summary>
            This message is sent during execution to indicate that the After method of a
            <see cref="T:Xunit.v3.IBeforeAfterTestAttribute"/> just finished executing.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IAfterTestFinished.AttributeName">
            <summary>
            Gets the fully qualified type name of the <see cref="T:Xunit.v3.IBeforeAfterTestAttribute"/>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.IAfterTestStarting">
            <summary>
            This message is sent during execution to indicate that the After method of a
            <see cref="T:Xunit.v3.IBeforeAfterTestAttribute"/> is about to execute.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IAfterTestStarting.AttributeName">
            <summary>
            Gets the fully qualified type name of the <see cref="T:Xunit.v3.IBeforeAfterTestAttribute"/>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.IBeforeTestFinished">
            <summary>
            This message is sent during execution to indicate that the Before method of a
            <see cref="T:Xunit.v3.IBeforeAfterTestAttribute"/> has completed executing.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IBeforeTestFinished.AttributeName">
            <summary>
            Gets the fully qualified type name of the <see cref="T:Xunit.v3.IBeforeAfterTestAttribute"/>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.IBeforeTestStarting">
            <summary>
            This message is sent during execution to indicate that the Before method of a
            <see cref="T:Xunit.v3.IBeforeAfterTestAttribute"/> is about to execute.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IBeforeTestStarting.AttributeName">
            <summary>
            Gets the fully qualified type name of the <see cref="T:Xunit.v3.IBeforeAfterTestAttribute"/>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.IDiagnosticMessage">
            <summary>
            This message is sent when code (1st or 3rd party) wants to alert the user to a situation that may require
            diagnostic investigation. This is typically not displayed unless the user has explicitly asked for diagnostic
            messages to be displayed (see <see href="https://xunit.net/docs/configuration-files#diagnosticMessages"/> on
            how to enable display of diagnostic messages).
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IDiagnosticMessage.Message">
            <summary>
            Gets the diagnostic message.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.IDiscoveryComplete">
            <summary>
            This message indicates that the discovery process has been completed for
            the requested assembly.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IDiscoveryComplete.TestCasesToRun">
            <summary>
            Gets a count of the number of test cases that passed the filter and will be run.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.IDiscoveryStarting">
            <summary>
            This message indicates that the discovery process is starting for
            the requested assembly.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IDiscoveryStarting.AssemblyName">
            <summary>
            Gets the assembly name. May return a simple assembly name (i.e., "mscorlib"), or may return a
            fully qualified name (i.e., "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089").
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IDiscoveryStarting.AssemblyPath">
            <summary>
            Gets the on-disk location of the assembly under test.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IDiscoveryStarting.ConfigFilePath">
            <summary>
            Gets the full path of the configuration file name, if one is present.
            May be <c>null</c> if there is no configuration file.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.IErrorMessage">
            <summary>
            This message indicates that a catastrophic error has occurred.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.IInternalDiagnosticMessage">
            <summary>
            This message is sent when xUnit.net itself wants to log internal messages and state that are typically only
            used by the xUnit.net team to gain a deeper understanding of potential end user issues. These messages are
            rarely useful to end users directly, and may result in very noisy logs. This is typically not displayed
            unless the user has explicit asked for internal diagnostic messages to be displayed (see
            <a href="https://xunit.net/docs/configuration-files#internalDiagnosticMessages"/> on how to enable
            display of internal diagnostic messages).
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IInternalDiagnosticMessage.Message">
            <summary>
            Gets the internal diagnostic message.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestAssemblyCleanupFailure">
            <summary>
            This message indicates that an error has occurred during test assembly cleanup.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestAssemblyFinished">
            <summary>
            This message indicates that the execution process has been completed for
            the requested assembly.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestAssemblyFinished.FinishTime">
            <summary>
            Gets the date and time when the test assembly execution finished.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestAssemblyStarting">
            <summary>
            This message indicates that the execution process is about to start for
            the requested assembly.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestAssemblyStarting.Seed">
            <summary>
            Gets the seed value used for randomization. If <c>null</c>, then the test framework
            does not support getting or setting a randomization seed. (For stock versions of xUnit.net,
            support for settable randomization seeds started with v3.)
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestAssemblyStarting.StartTime">
            <summary>
            Gets the date and time when the test assembly execution began.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestAssemblyStarting.TargetFramework">
            <summary>
            Gets the target framework that the assembly was compiled against.
            Examples: ".NETFramework,Version=v4.7.2", ".NETCoreApp,Version=v6.0". This information
            is read from <see cref="T:System.Runtime.Versioning.TargetFrameworkAttribute"/> on the test assembly, which
            is normally auto-generated (but could be missing or empty).
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestAssemblyStarting.TestEnvironment">
            <summary>
            Gets a display string that describes the test execution environment.
            Examples: "32-bit .NET Framework 4.8.4220.0", "64-bit .NET Core 4.6.29220.03"
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestAssemblyStarting.TestFrameworkDisplayName">
            <summary>
            Gets a display string which describes the test framework and version number.
            Examples: "xUnit.net v3 0.1.0-pre.15", "xUnit.net 2.4.1"
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestCaseCleanupFailure">
            <summary>
            This message indicates that an error has occurred during test case cleanup.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestCaseDiscovered">
            <summary>
            This message indicates that a test case had been found during the discovery process.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestCaseDiscovered.Serialization">
            <summary>
            Gets the serialized value of the test case, which allows it to be transferred across
            process boundaries.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestCaseFinished">
            <summary>
            This message indicates that a test case has finished executing.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestCaseStarting">
            <summary>
            This message indicates that a test case is about to start executing.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestClassCleanupFailure">
            <summary>
            This message indicates that an error has occurred during test class cleanup.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestClassConstructionFinished">
            <summary>
            This message indicates that an instance of a test class has just been constructed.
            Instance (non-static) methods of tests get a new instance of the test class for each
            individual test execution; static methods do not get an instance of the test class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestClassConstructionStarting">
            <summary>
            This message indicates that an instance of a test class is about to be constructed.
            Instance (non-static) methods of tests get a new instance of the test class for each
            individual test execution; static methods do not get an instance of the test class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestClassDisposeFinished">
            <summary>
            This message indicates that the <see cref="M:System.IDisposable.Dispose"/> or
            <see cref="M:System.IAsyncDisposable.DisposeAsync"/> method was just called on the test class
            for the test that just finished executing.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestClassDisposeStarting">
            <summary>
            This message indicates that the <see cref="M:System.IDisposable.Dispose"/> or
            <see cref="M:System.IAsyncDisposable.DisposeAsync"/> method is about to be called on the
            test class for the test that just finished executing.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestClassFinished">
            <summary>
            This message indicates that a test class has finished executing (meaning, all of the
            test cases in this test class have finished running).
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestClassStarting">
            <summary>
            This message indicates that a test class is about to begin executing.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestCleanupFailure">
            <summary>
            This message indicates that an error has occurred during test cleanup.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestCollectionCleanupFailure">
            <summary>
            This message indicates that an error has occurred during test collection cleanup.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestCollectionFinished">
            <summary>
            This message indicates that a test collection has just finished executing (meaning,
            all the test classes in the collection has finished).
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestCollectionStarting">
            <summary>
            This message indicates that a test collection is about to start executing.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestFailed">
            <summary>
            This message indicates that a test has failed.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestFailed.Cause">
            <summary>
            Gets the cause of the test failure.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestFinished">
            <summary>
            This message indicates that a test has finished executing.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestFinished.Attachments">
            <summary>
            Gets any attachments that were added to the test result via <see cref="M:Xunit.TestContext.AddAttachment"/>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestMethodCleanupFailure">
            <summary>
            This message indicates that an error has occurred during test method cleanup.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestMethodFinished">
            <summary>
            This message indicates that a test method has finished executing (meaning, all
            the test cases that derived from the test method have finished).
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestMethodStarting">
            <summary>
            This message indicates that a test method is about to begin executing.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestNotRun">
            <summary>
            This message indicates that a test was not run because it was excluded (either because
            it was marked as explicit and explicit tests weren't run, or because it was marked as
            not explicit as only explicit tests were run).
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestOutput">
            <summary>
            This message indicates that a line of output was provided for a test.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestOutput.Output">
            <summary>
            Gets the line of output.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestPassed">
            <summary>
            Indicates that a test has passed.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestSkipped">
            <summary>
            This message indicates that a test was skipped.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestSkipped.Reason">
            <summary>
            Gets the reason given for skipping the test.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestStarting">
            <summary>
            This message indicates that a test is about to start executing.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestStarting.Explicit">
            <summary>
            Gets a flag which indicates whether the test is marked as explicit or not.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestStarting.StartTime">
            <summary>
            Gets the date and time when the test execution began.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestStarting.Timeout">
            <summary>
            Gets the timeout for the test, in milliseconds; if <c>0</c>, there is no timeout.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.IAssemblyMetadata">
            <summary>
            Represents metadata about a test assembly.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IAssemblyMetadata.AssemblyName">
            <summary>
            Gets the assembly name. May return a simple assembly name (i.e., "mscorlib"), or may return a
            fully qualified name (i.e., "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089").
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IAssemblyMetadata.AssemblyPath">
            <summary>
            Gets the on-disk location of the assembly under test.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IAssemblyMetadata.ConfigFilePath">
            <summary>
            Gets the full path of the configuration file name, if one is present.
            May be <c>null</c> if there is no configuration file.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IAssemblyMetadata.Traits">
            <summary>
            Gets the trait values associated with this test assembly. If
            there are none, or the framework does not support traits,
            this should return an empty dictionary (not <c>null</c>).
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IAssemblyMetadata.UniqueID">
            <summary>
            Gets the unique ID for this test assembly.
            </summary>
            <remarks>
            The unique identifier for a test assembly should be able to discriminate among test assemblies with
            their associated configuration file (so the same assembly with two different configuration files
            should have two different unique IDs). This identifier should remain stable until such time as
            the developer changes some fundamental part of the identity. Recompilation of the test assembly
            is reasonable as a stability changing event.
            </remarks>
        </member>
        <member name="T:Xunit.Sdk.IErrorMetadata">
            <summary>
            Represents metadata about an error during test discovery or execution.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IErrorMetadata.ExceptionParentIndices">
            <summary>
            Gets the parent exception index(es) for the exception(s); a -1 indicates
            that the exception in question has no parent.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IErrorMetadata.ExceptionTypes">
            <summary>
            Gets the fully-qualified type name(s) of the exception(s).
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IErrorMetadata.Messages">
            <summary>
            Gets the message(s) of the exception(s).
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IErrorMetadata.StackTraces">
            <summary>
            Gets the stack trace(s) of the exception(s).
            </summary>
        </member>
        <member name="T:Xunit.Sdk.IExecutionMetadata">
            <summary>
            This is metadata describing the execution of a single test.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IExecutionMetadata.ExecutionTime">
            <summary>
            The time spent executing the test, in seconds. Will be 0 if the test was not executed.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IExecutionMetadata.Output">
            <summary>
            The captured output of the test. Will be <see cref="F:System.String.Empty"/> if there was no output.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IExecutionMetadata.Warnings">
            <summary>
            Gets a list of the warning messages that were recorded during execution. Will be <c>null</c>
            if there were no warnings.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.IExecutionSummaryMetadata">
            <summary>
            This is metadata describing the summary during various phases of execution process (e.g.,
            test case, test class, test collection, and assembly). It describes the aggregation of
            zero or more tests being executed.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IExecutionSummaryMetadata.ExecutionTime">
            <summary>
            Gets the execution time (in seconds) for this execution.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IExecutionSummaryMetadata.TestsFailed">
            <summary>
            Gets the number of failing tests.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IExecutionSummaryMetadata.TestsNotRun">
            <summary>
            Gets the number of tests that were not run. This includes explicit tests when explicit tests are not run,
            or non-expicit tests when non-explicit tests are not run.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IExecutionSummaryMetadata.TestsSkipped">
            <summary>
            Gets the number of skipped tests.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IExecutionSummaryMetadata.TestsTotal">
            <summary>
            Gets the total number of tests run and not run.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestCaseMetadata">
            <summary>
            Represents metadata about a test case.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestCaseMetadata.Explicit">
            <summary>
            Gets a flag indicating whether this test case was marked as explicit or not.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestCaseMetadata.SkipReason">
            <summary>
            Gets the display text for the reason a test is being skipped; if the test
            is not statically skipped, returns <c>null</c>. (A test may be dynamically
            skipped at runtime while still returning <c>null</c>.)
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestCaseMetadata.SourceFilePath">
            <summary>
            Gets the source file name. A <c>null</c> value indicates that the
            source file name is not known.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestCaseMetadata.SourceLineNumber">
            <summary>
            Gets the source file line number. A <c>null</c> value indicates that the
            source file line number is not known.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestCaseMetadata.TestCaseDisplayName">
            <summary>
            Gets the display name of the test case.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestCaseMetadata.TestClassMetadataToken">
            <summary>
            Gets the <see cref="P:System.Reflection.MemberInfo.MetadataToken"/> for the test class. If the test did not
            originate in a class, will return <c>null</c>.
            </summary>
            <remarks>
            This value is only populated for xUnit.net v3 or later test cases, and will return <c>null</c>
            for v1 or v2 test cases, regardless of whether <see cref="P:Xunit.Sdk.ITestCaseMetadata.TestClassName"/> is <c>null</c>.
            </remarks>
        </member>
        <member name="P:Xunit.Sdk.ITestCaseMetadata.TestClassName">
            <summary>
            Gets the full name of the class where the test is defined (i.e., <see cref="P:System.Type.FullName"/>).
            If the test did not originiate in a class, will return <c>null</c>.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestCaseMetadata.TestClassNamespace">
            <summary>
            Gets the namespace of the class where the test is defined. If the test did not
            originate in a class, or the class it originated in does not reside in a namespace,
            will return <c>null</c>.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestCaseMetadata.TestClassSimpleName">
            <summary>
            Gets the simple name of the class where the test is defined (the class name without namespace).
            If the test did not originiate in a class, will return <c>null</c>.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestCaseMetadata.TestMethodArity">
            <summary>
            Gets the arity (number of generic types) on the method itself. If the test did not originate
            in a method, will return <c>null</c>.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestCaseMetadata.TestMethodMetadataToken">
            <summary>
            Gets the <see cref="P:System.Reflection.MemberInfo.MetadataToken"/> for the test method. If the test did not
            originate in a method, or the test framework did not provide this information, will return <c>null</c>.
            </summary>
            <remarks>
            This value is only populated for xUnit.net v3 or later test cases, and will return <c>null</c>
            for v1 or v2 test cases, regardless of whether <see cref="P:Xunit.Sdk.ITestCaseMetadata.TestMethodName"/> is <c>null</c>.
            </remarks>
        </member>
        <member name="P:Xunit.Sdk.ITestCaseMetadata.TestMethodName">
            <summary>
            Gets the method name where the test is defined, in the <see cref="P:Xunit.Sdk.ITestCaseMetadata.TestClassName"/> class.
            If the test did not originiate in a method, will return <c>null</c>.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestCaseMetadata.TestMethodParameterTypesVSTest">
            <summary>
            Gets the types for the test method parameters. If the test did not originate in a method,
            or the test framework does not provide this information, will return <c>null</c>; if the test
            method has no parameters, will return an empty array.
            </summary>
            <remarks>
            The values here are formatted according to
            <see href="https://github.com/microsoft/vstest/blob/main/docs/RFCs/0017-Managed-TestCase-Properties.md">VSTest rules</see>
            in order to support Test Explorer. Note that this is not the same as <see cref="P:System.Type.FullName"/>.
            </remarks>
        </member>
        <member name="P:Xunit.Sdk.ITestCaseMetadata.TestMethodReturnTypeVSTest">
            <summary>
            Gets the test method return type. If the test did not originate in a method, or the test framework
            did not provide this information, will return <c>null</c>.
            </summary>
            <remarks>
            The value here is formatted according to
            <see href="https://github.com/microsoft/vstest/blob/main/docs/RFCs/0017-Managed-TestCase-Properties.md">VSTest rules</see>
            in order to support Test Explorer. Note that this is not the same as <see cref="P:System.Type.FullName"/>.
            </remarks>
        </member>
        <member name="P:Xunit.Sdk.ITestCaseMetadata.Traits">
            <summary>
            Gets the trait values associated with this test case. If there are none, or the framework
            does not support traits, this should return an empty dictionary (not <c>null</c>).
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestCaseMetadata.UniqueID">
            <summary>
            Gets a unique identifier for the test case.
            </summary>
            <remarks>
            The unique identifier for a test case should be able to discriminate among test cases, even those
            which are varied invocations against the same test method (i.e., theories). This identifier should
            remain stable until such time as the developer changes some fundamental part of the identity
            (assembly, class name, test name, or test data). Recompilation of the test assembly is reasonable
            as a stability changing event.
            </remarks>
        </member>
        <member name="T:Xunit.Sdk.ITestClassMetadata">
            <summary>
            Represents metadata about a test class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestClassMetadata.TestClassName">
            <summary>
            Gets the full name of the test class (i.e., <see cref="P:System.Type.FullName"/>).
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestClassMetadata.TestClassNamespace">
            <summary>
            Gets the namespace of the class where the test is defined. Will return <c>null</c> for
            classes not residing in a namespace.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestClassMetadata.TestClassSimpleName">
            <summary>
            Gets the simple name of the test class (the class name without namespace).
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestClassMetadata.Traits">
            <summary>
            Gets the trait values associated with this test class (and the test collection, and test
            assembly). If there are none, or the framework does not support traits, this returns an
            empty dictionary (not <c>null</c>).
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestClassMetadata.UniqueID">
            <summary>
            Gets the unique ID for this test class.
            </summary>
            <remarks>
            The unique identifier for a test class should be able to discriminate among test classes in the
            same test assembly. This identifier should remain stable until such time as the developer changes
            some fundamental part of the identity (assembly, collection, or test class). Recompilation of the
            test assembly is reasonable as a stability changing event.
            </remarks>
        </member>
        <member name="T:Xunit.Sdk.ITestCollectionMetadata">
            <summary>
            Represents metadata about a test collection.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestCollectionMetadata.TestCollectionClassName">
            <summary>
            Gets the type that the test collection was defined with, if available; may be <c>null</c>
            if the test collection didn't have a definition type.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestCollectionMetadata.TestCollectionDisplayName">
            <summary>
            Gets the display name of the test collection.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestCollectionMetadata.Traits">
            <summary>
            Gets the trait values associated with this test collection (and the test assembly).
            If there are none, or the framework does not support traits, this returns an empty
            dictionary (not <c>null</c>).
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestCollectionMetadata.UniqueID">
            <summary>
            Gets the unique ID for this test collection.
            </summary>
            <remarks>
            The unique identifier for a test collection should be able to discriminate among test collections
            in the same test assembly. This identifier should remain stable until such time as the developer
            changes some fundamental part of the identity (the test assembly, the collection definition
            class, or the collection name). Recompilation of the test assembly is reasonable as a stability
            changing event.
            </remarks>
        </member>
        <member name="T:Xunit.Sdk.ITestMetadata">
            <summary>
            Represents metadata about a test.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestMetadata.TestDisplayName">
            <summary>
            Gets the display name of the test.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestMetadata.Traits">
            <summary>
            Gets the trait values associated with this test case. If
            there are none, or the framework does not support traits,
            this should return an empty dictionary (not <c>null</c>).
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestMetadata.UniqueID">
            <summary>
            Gets a unique identifier for the test.
            </summary>
            <remarks>
            The unique identifier for a test should be able to discriminate among test, even those which are
            varied invocations against the same test method (i.e., theories). This identifier should remain
            stable until such time as the developer changes some fundamental part of the identity (assembly,
            class name, test name, or test data). Recompilation of the test assembly is reasonable as a
            stability changing event.
            </remarks>
        </member>
        <member name="T:Xunit.Sdk.ITestMethodMetadata">
            <summary>
            Represents metadata about a test method.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestMethodMetadata.MethodArity">
            <summary>
            Gets the arity (number of generic types) of the test method. May return <c>null</c> if
            the arity of the test method is unknown (for example, for v1 or v2 test methods where
            arity information was not collected).
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestMethodMetadata.MethodName">
            <summary>
            Gets the name of the test method that is associated with this message.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestMethodMetadata.Traits">
            <summary>
            Gets the trait values associated with this test method (and the test class,
            test collection, and test assembly). If there are none, or the framework does
            not support traits, this returns an empty dictionary (not <c>null</c>).
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestMethodMetadata.UniqueID">
            <summary>
            Gets the unique ID for this test method.
            </summary>
            <remarks>
            The unique identifier for a test method should be able to discriminate among test methods in the
            same test assembly. This identifier should remain stable until such time as the developer changes
            some fundamental part of the identity (assembly, collection, test class, or test method).
            Recompilation of the test assembly is reasonable as a stability changing event.
            </remarks>
        </member>
        <member name="T:Xunit.Sdk.ITest">
            <summary>
            Represents a single test in the system. A test case typically contains only a single test,
            but may contain many if circumstances warrant it (for example, test data for a theory cannot
            be pre-enumerated, so the theory yields a single test case with multiple tests).
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITest.TestCase">
            <summary>
            Gets the test case this test belongs to.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestAssembly">
            <summary>
            Represents a test assembly.
            </summary>
            <remarks>
            Although most test frameworks will use an <see cref="T:System.Reflection.Assembly"/> for the test assembly,
            this is not a requirement at this layer. Assembly is just an abstraction that represents
            a group of zero or more <see cref="T:Xunit.Sdk.ITestCollection"/>s.
            </remarks>
        </member>
        <member name="P:Xunit.Sdk.ITestAssembly.ModuleVersionID">
            <summary>
            Returns the module version ID of the test assembly. Used as the basis for randomization.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestCase">
            <summary>
            Represents a single test case in the system. This test case usually represents a single test, but in
            the case of dynamically generated data for data driven tests, the test case may actually return
            multiple results when run.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestCase.TestClass">
            <summary>
            Gets the test class that this test case belongs to; may be <c>null</c> if the test isn't backed by
            a class, but will not be <c>null</c> if <see cref="P:Xunit.Sdk.ITestCase.TestMethod"/> is not <c>null</c> (and must be
            the same instance returned via <see cref="P:Xunit.Sdk.ITestCase.TestMethod"/>).
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestCase.TestCollection">
            <summary>
            Gets the test collection this test case belongs to. Must be the same instance returned
            via <see cref="P:Xunit.Sdk.ITestCase.TestMethod"/> and/or <see cref="P:Xunit.Sdk.ITestCase.TestClass"/> when they are not <c>null</c>.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ITestCase.TestMethod">
            <summary>
            Gets the test method this test case belongs to; may be <c>null</c> if the test isn't backed by
            a method.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestClass">
            <summary>
            Represents a test class, which contributes one or more test cases (usually by
            way of test methods).
            </summary>
            <remarks>
            Not all test frameworks will require that tests come from classes, so this abstraction
            may or many not be used.
            </remarks>
        </member>
        <member name="P:Xunit.Sdk.ITestClass.TestCollection">
            <summary>
            Gets the test collection this test class belongs to.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestCollection">
            <summary>
            Represents a group of test cases.
            </summary>
            <remarks>
            The test framework decides how test collections are defined and what their purpose is.
            </remarks>
        </member>
        <member name="P:Xunit.Sdk.ITestCollection.TestAssembly">
            <summary>
            Gets the test assembly this test collection belongs to.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestMethod">
            <summary>
            Represents a test method, which contributes one or more test cases.
            </summary>
            <remarks>
            Not all test frameworks will require that tests come from methods, so this abstraction
            may or many not be used.
            </remarks>
        </member>
        <member name="P:Xunit.Sdk.ITestMethod.TestClass">
            <summary>
            Gets the test class that this test method belongs to.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestFrameworkDiscoveryOptions">
            <summary>
            Represents an instance of <see cref="T:Xunit.Sdk.ITestFrameworkOptions"/> that is to be used for
            test discovery purposes.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestFrameworkExecutionOptions">
            <summary>
            Represents an instance of <see cref="T:Xunit.Sdk.ITestFrameworkOptions"/> that is to be used for
            test execution purposes.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestFrameworkOptions">
            <summary>
            This interface should not be consumed directly; instead, you should
            consume <see cref="T:Xunit.Sdk.ITestFrameworkDiscoveryOptions"/>
            or <see cref="T:Xunit.Sdk.ITestFrameworkExecutionOptions"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ITestFrameworkOptions.GetValue``1(System.String)">
            <summary>
            Gets an option value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">The name of the value.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Xunit.Sdk.ITestFrameworkOptions.SetValue``1(System.String,``0)">
            <summary>
            Sets an option value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">The name of the value.</param>
            <param name="value">The value to be set.</param>
        </member>
        <member name="M:Xunit.Sdk.ITestFrameworkOptions.ToJson">
            <summary>
            Converts the test framework options into JSON. Used for serializing the options
            for sending across a process boundary.
            </summary>
            <returns>The serialized framework options.</returns>
        </member>
        <member name="T:Xunit.Sdk.IRegisterXunitSerializerAttribute">
            <summary>
            Used to decorate xUnit.net test assemblies to register an external serializer for
            one or more supports types to serialize.
            </summary>
            <remarks>Serializer registration attributes are only valid at the assembly level.</remarks>
        </member>
        <member name="P:Xunit.Sdk.IRegisterXunitSerializerAttribute.SerializerType">
            <summary>
            Gets the type of the serializer.
            </summary>
            <remarks>
            The serializer type must implement <see cref="T:Xunit.Sdk.IXunitSerializer"/>.
            </remarks>
        </member>
        <member name="P:Xunit.Sdk.IRegisterXunitSerializerAttribute.SupportedTypesForSerialization">
            <summary>
            Gets the types that are supported by the serializer.
            </summary>
            <remarks>
            When searching for a serializer to deserialize a value, exact type matches are
            given higher priority than compatible type matches, and if more than one serializer
            can support a given type based on compatible type match, then one will be chosen
            arbitrarily to support the deserialization.
            </remarks>
        </member>
        <member name="T:Xunit.Sdk.IXunitSerializable">
            <summary>
            This interface should be implemented by any custom object which requires serialization.
            In addition to implementing this interface, objects must also offer a parameterless
            public constructor so that an empty object can be created to be deserialized into.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.IXunitSerializable.Deserialize(Xunit.Sdk.IXunitSerializationInfo)">
            <summary>
            Called when the object should populate itself with data from the serialization info.
            </summary>
            <param name="info">The info to get the object data from</param>
        </member>
        <member name="M:Xunit.Sdk.IXunitSerializable.Serialize(Xunit.Sdk.IXunitSerializationInfo)">
            <summary>
            Called when the object should store its serialized values into the serialization info.
            </summary>
            <param name="info">The info to store the object data into</param>
        </member>
        <member name="T:Xunit.Sdk.IXunitSerializationInfo">
            <summary>
            An interface that is implemented by the serialization infrastructure in xUnit.net.
            This is passed to objects which implement <see cref="T:Xunit.Sdk.IXunitSerializable"/> so they
            can serialize and deserialize themselves from the serialization store.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.IXunitSerializationInfo.AddValue(System.String,System.Object,System.Type)">
            <summary>
            Adds a value to the serialization. Supported value types include the built-in
            intrinsics (string, int, long, float, double, and decimal, including nullable
            versions of those), any class which implements <see cref="T:Xunit.Sdk.IXunitSerializable"/>),
            or arrays of any supported types.
            </summary>
            <param name="key">The key to store the value with</param>
            <param name="value">The value to be stored</param>
            <param name="valueType">The type of the value to be stored; optional, unless the
            value of <paramref name="value"/> is <c>null</c>.</param>
            <exception cref="T:System.ArgumentException">Thrown if the value is not a supported type.</exception>
        </member>
        <member name="M:Xunit.Sdk.IXunitSerializationInfo.GetValue(System.String)">
            <summary>
            Gets a value from the serialization.
            </summary>
            <param name="key">The key of the value to retrieve</param>
            <returns>The value, if present; <c>null</c>, otherwise</returns>
        </member>
        <member name="T:Xunit.Sdk.IXunitSerializer">
            <summary>
            Implemented by types which can support serialization and deserialization. This
            allows external serializers for types which would be inconvenient or impossible
            to implement <see cref="T:Xunit.Sdk.IXunitSerializable"/> directly.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.IXunitSerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes a value that was obtained from <see cref="M:Xunit.Sdk.IXunitSerializer.Serialize(System.Object)"/>.
            </summary>
            <param name="type">The type of the original value</param>
            <param name="serializedValue">The serialized value</param>
            <returns>The deserialized value</returns>
        </member>
        <member name="M:Xunit.Sdk.IXunitSerializer.IsSerializable(System.Type,System.Object,System.String@)">
            <summary>
            Determines if a specific value of data is serializable.
            </summary>
            <param name="type">The type of the value</param>
            <param name="value">The value to test</param>
            <param name="failureReason">Returns a failure reason when the value isn't serializable</param>
            <returns>Return <c>true</c> if the value is serializable; <c>false</c>, otherwise</returns>
            <remarks>
            This will be called by <see cref="M:Xunit.Sdk.SerializationHelper.IsSerializable(System.Object)"/>,
            <see cref="M:Xunit.Sdk.SerializationHelper.IsSerializable(System.Object,System.Type)"/>, and
            <see cref="M:Xunit.Sdk.SerializationHelper.Serialize(System.Object,System.Type)"/>. The failure reason is used when
            called from <c>Serialize</c> to format an error exception, but is otherwise ignored
            from the calls from <c>IsSerializable</c>.<br />
            <br />
            The type of <paramref name="value"/> may not directly match <paramref name="type"/>, as the type
            is derived from unwrapping nullability and array element types, so use care when looking
            at the value to determine serializability.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.IXunitSerializer.Serialize(System.Object)">
            <summary>
            Serializes a value into a string to be later deserialized with <see cref="M:Xunit.Sdk.IXunitSerializer.Deserialize(System.Type,System.String)"/>.
            </summary>
            <param name="value">The value to be serialized</param>
            <returns>The serialized value</returns>
            <remarks>
            This method will never be called with <c>null</c> values, because those are already
            special cased by the serialization system. You may assume that <see cref="M:Xunit.Sdk.IXunitSerializer.IsSerializable(System.Type,System.Object,System.String@)"/>
            is called before this, so any validation done there need not be repeated here.
            </remarks>
        </member>
        <member name="T:Xunit.Sdk.IAssemblyMetadataExtensions">
            <summary>
            Extension methods for <see cref="T:Xunit.Sdk.IAssemblyMetadata"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.IAssemblyMetadataExtensions.SimpleAssemblyName(Xunit.Sdk.IAssemblyMetadata)">
            <summary>
            Computes the simple assembly name from <see cref="P:Xunit.Sdk.IAssemblyMetadata.AssemblyName"/>.
            </summary>
            <returns>The simple assembly name.</returns>
        </member>
        <member name="T:Xunit.Sdk.JsonSerializerExtensions">
            <summary>
            Extension methods for the JSON serialization types.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.JsonSerializerExtensions.SerializeIntArray(Xunit.Sdk.JsonObjectSerializer,System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            Serializes an array of integers into the object.
            </summary>
            <param name="serializer"></param>
            <param name="key">The key to serialize the array to</param>
            <param name="values">The values in the array</param>
            <param name="includeNullArray">Whether to serialize the array if it's null</param>
        </member>
        <member name="M:Xunit.Sdk.JsonSerializerExtensions.SerializeStringArray(Xunit.Sdk.JsonObjectSerializer,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Serializes an array of strings into the object.
            </summary>
            <param name="serializer"></param>
            <param name="key">The key to serialize the array to</param>
            <param name="values">The values in the array</param>
            <param name="includeNullArray">Whether to serialize the array if it's null</param>
        </member>
        <member name="M:Xunit.Sdk.JsonSerializerExtensions.SerializeTraits(Xunit.Sdk.JsonObjectSerializer,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Collections.Generic.IReadOnlyCollection{System.String}},System.Boolean)">
            <summary>
            Serialize a trait dictionary value into the object.
            </summary>
            <param name="serializer"></param>
            <param name="key">The name of the value</param>
            <param name="dictionary">The trait dictionary</param>
            <param name="includeEmptyTraits">A flag to indicate whether to render empty traits</param>
        </member>
        <member name="T:Xunit.Sdk.ReflectionExtensions">
            <summary>
            Extension methods for reflection types in .NET.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetArity(System.Reflection.MethodInfo)">
            <summary>
            Gets the arity (number of generic types) of the method.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetDefaultValue(System.Type)">
            <summary>
            Returns the default value for the given type. For value types, this means a 0-initialized
            instance of the type; for reference types, this means <c>null</c>.
            </summary>
            <param name="type">The type to get the default value of.</param>
            <returns>The default value for the given type.</returns>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetDisplayNameWithArguments(System.Reflection.MethodInfo,System.String,System.Object[],System.Type[])">
            <summary>
            Formulates the extended portion of the display name for a test method. For tests with no arguments, this will
            return just the base name; for tests with arguments, attempts to format the arguments and appends the argument
            list to the test name.
            </summary>
            <param name="method">The test method</param>
            <param name="baseDisplayName">The base part of the display name</param>
            <param name="arguments">The test method arguments</param>
            <param name="genericTypes">The test method's generic types</param>
            <returns>The full display name for the test method</returns>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes(System.Reflection.Assembly,System.Type)">
            <summary>
            Gets all the custom attributes for the assembly that are of the given attribute type.
            </summary>
            <param name="assembly">The assembly to get custom attributes for.</param>
            <param name="attributeType">The type of the attribute to find. Will accept attribute types that are concrete,
            closed generic, and open generic. When provided an open generic type (e.g., MyAttribute&lt;&gt;) it will
            return matching closed generic attributes (e.g., MyAttribute&gt;int&lt;)</param>
            <returns>The matching attributes that decorate the assembly</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes(System.Reflection.Assembly,System.Type,System.Collections.Generic.List{System.String})">
            <summary>
            Gets all the custom attributes for the assembly that are of the given attribute type.
            </summary>
            <param name="assembly">The assembly to get custom attributes for.</param>
            <param name="attributeType">The type of the attribute to find. Will accept attribute types that are concrete,
            closed generic, and open generic. When provided an open generic type (e.g., MyAttribute&lt;&gt;) it will
            return matching closed generic attributes (e.g., MyAttribute&gt;int&lt;)</param>
            <param name="warnings">A collection to fill with warning messages about attribute construction failure</param>
            <returns>The matching attributes that decorate the assembly</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes(System.Reflection.Assembly,System.String)">
            <summary>
            Gets all the custom attributes for the assembly that are of the given attribute type.
            </summary>
            <param name="assembly">The assembly to get custom attributes for.</param>
            <param name="assemblyQualifiedTypeName">The type of the attribute to find. Will accept attribute types that are concrete,
            closed generic, and open generic. When provided an open generic type (e.g., MyAttribute&lt;&gt;) it will
            return matching closed generic attributes (e.g., MyAttribute&gt;int&lt;)</param>
            <returns>The matching attributes that decorate the assembly</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes(System.Reflection.Assembly,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Gets all the custom attributes for the assembly that are of the given attribute type.
            </summary>
            <param name="assembly">The assembly to get custom attributes for.</param>
            <param name="assemblyQualifiedTypeName">The type of the attribute to find. Will accept attribute types that are concrete,
            closed generic, and open generic. When provided an open generic type (e.g., MyAttribute&lt;&gt;) it will
            return matching closed generic attributes (e.g., MyAttribute&gt;int&lt;)</param>
            <param name="warnings">A collection to fill with warning messages about attribute construction failure</param>
            <returns>The matching attributes that decorate the assembly</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes``1(System.Reflection.Assembly)">
            <summary>
            Gets all the custom attributes for the assembly that are of the given attribute type.
            </summary>
            <param name="assembly">The assembly to get custom attributes for.</param>
            <returns>The matching attributes that decorate the assembly</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes``1(System.Reflection.Assembly,System.Collections.Generic.List{System.String})">
            <summary>
            Gets all the custom attributes for the assembly that are of the given attribute type.
            </summary>
            <param name="assembly">The assembly to get custom attributes for.</param>
            <param name="warnings">A collection to fill with warning messages about attribute construction failure</param>
            <returns>The matching attributes that decorate the assembly</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes(System.Attribute,System.Type)">
            <summary>
            Gets all the custom attributes for the attribute that are of the given attribute type.
            </summary>
            <param name="attribute">The attribute to get custom attributes for.</param>
            <param name="attributeType">The type of the attribute to find. Will accept attribute types that are concrete,
            closed generic, and open generic. When provided an open generic type (e.g., MyAttribute&lt;&gt;) it will
            return matching closed generic attributes (e.g., MyAttribute&gt;int&lt;)</param>
            <returns>The matching attributes that decorate the attribute</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes(System.Attribute,System.Type,System.Collections.Generic.List{System.String})">
            <summary>
            Gets all the custom attributes for the attribute that are of the given attribute type.
            </summary>
            <param name="attribute">The attribute to get custom attributes for.</param>
            <param name="attributeType">The type of the attribute to find. Will accept attribute types that are concrete,
            closed generic, and open generic. When provided an open generic type (e.g., MyAttribute&lt;&gt;) it will
            return matching closed generic attributes (e.g., MyAttribute&gt;int&lt;)</param>
            <param name="warnings">A collection to fill with warning messages about attribute construction failure</param>
            <returns>The matching attributes that decorate the attribute</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes(System.Attribute,System.String)">
            <summary>
            Gets all the custom attributes for the attribute that are of the given attribute type.
            </summary>
            <param name="attribute">The attribute to get custom attributes for.</param>
            <param name="assemblyQualifiedTypeName">The type of the attribute to find. Will accept attribute types that are concrete,
            closed generic, and open generic. When provided an open generic type (e.g., MyAttribute&lt;&gt;) it will
            return matching closed generic attributes (e.g., MyAttribute&gt;int&lt;)</param>
            <returns>The matching attributes that decorate the attribute</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes(System.Attribute,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Gets all the custom attributes for the attribute that are of the given attribute type.
            </summary>
            <param name="attribute">The attribute to get custom attributes for.</param>
            <param name="assemblyQualifiedTypeName">The type of the attribute to find. Will accept attribute types that are concrete,
            closed generic, and open generic. When provided an open generic type (e.g., MyAttribute&lt;&gt;) it will
            return matching closed generic attributes (e.g., MyAttribute&gt;int&lt;)</param>
            <param name="warnings">A collection to fill with warning messages about attribute construction failure</param>
            <returns>The matching attributes that decorate the attribute</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes``1(System.Attribute)">
            <summary>
            Gets all the custom attributes for the attribute that are of the given attribute type.
            </summary>
            <param name="attribute">The attribute to get custom attributes for.</param>
            <returns>The matching attributes that decorate the attribute</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes``1(System.Attribute,System.Collections.Generic.List{System.String})">
            <summary>
            Gets all the custom attributes for the attribute that are of the given attribute type.
            </summary>
            <param name="attribute">The attribute to get custom attributes for.</param>
            <param name="warnings">A collection to fill with warning messages about attribute construction failure</param>
            <returns>The matching attributes that decorate the attribute</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Gets all the custom attributes for the method that are of the given attribute type.
            </summary>
            <param name="method">The method to get custom attributes for.</param>
            <param name="attributeType">The type of the attribute to find. Will accept attribute types that are concrete,
            closed generic, and open generic. When provided an open generic type (e.g., MyAttribute&lt;&gt;) it will
            return matching closed generic attributes (e.g., MyAttribute&gt;int&lt;)</param>
            <returns>The matching attributes that decorate the method</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes(System.Reflection.MethodInfo,System.Type,System.Collections.Generic.List{System.String})">
            <summary>
            Gets all the custom attributes for the method that are of the given attribute type.
            </summary>
            <param name="method">The method to get custom attributes for.</param>
            <param name="attributeType">The type of the attribute to find. Will accept attribute types that are concrete,
            closed generic, and open generic. When provided an open generic type (e.g., MyAttribute&lt;&gt;) it will
            return matching closed generic attributes (e.g., MyAttribute&gt;int&lt;)</param>
            <param name="warnings">A collection to fill with warning messages about attribute construction failure</param>
            <returns>The matching attributes that decorate the method</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes(System.Reflection.MethodInfo,System.String)">
            <summary>
            Gets all the custom attributes for the method that are of the given attribute type.
            </summary>
            <param name="method">The method to get custom attributes for.</param>
            <param name="assemblyQualifiedTypeName">The type of the attribute to find. Will accept attribute types that are concrete,
            closed generic, and open generic. When provided an open generic type (e.g., MyAttribute&lt;&gt;) it will
            return matching closed generic attributes (e.g., MyAttribute&gt;int&lt;)</param>
            <returns>The matching attributes that decorate the method</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes(System.Reflection.MethodInfo,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Gets all the custom attributes for the method that are of the given attribute type.
            </summary>
            <param name="method">The method to get custom attributes for.</param>
            <param name="assemblyQualifiedTypeName">The type of the attribute to find. Will accept attribute types that are concrete,
            closed generic, and open generic. When provided an open generic type (e.g., MyAttribute&lt;&gt;) it will
            return matching closed generic attributes (e.g., MyAttribute&gt;int&lt;)</param>
            <param name="warnings">A collection to fill with warning messages about attribute construction failure</param>
            <returns>The matching attributes that decorate the method</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes``1(System.Reflection.MethodInfo)">
            <summary>
            Gets all the custom attributes for the method that are of the given attribute type.
            </summary>
            <param name="method">The method to get custom attributes for.</param>
            <returns>The matching attributes that decorate the method</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes``1(System.Reflection.MethodInfo,System.Collections.Generic.List{System.String})">
            <summary>
            Gets all the custom attributes for the method that are of the given attribute type.
            </summary>
            <param name="method">The method to get custom attributes for.</param>
            <param name="warnings">A collection to fill with warning messages about attribute construction failure</param>
            <returns>The matching attributes that decorate the method</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes(System.Reflection.ParameterInfo,System.Type)">
            <summary>
            Gets all the custom attributes for the parameter that are of the given attribute type.
            </summary>
            <param name="parameter">The parameter to get custom attributes for.</param>
            <param name="attributeType">The type of the attribute to find. Will accept attribute types that are concrete,
            closed generic, and open generic. When provided an open generic type (e.g., MyAttribute&lt;&gt;) it will
            return matching closed generic attributes (e.g., MyAttribute&gt;int&lt;)</param>
            <returns>The matching attributes that decorate the parameter</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Collections.Generic.List{System.String})">
            <summary>
            Gets all the custom attributes for the parameter that are of the given attribute type.
            </summary>
            <param name="parameter">The parameter to get custom attributes for.</param>
            <param name="attributeType">The type of the attribute to find. Will accept attribute types that are concrete,
            closed generic, and open generic. When provided an open generic type (e.g., MyAttribute&lt;&gt;) it will
            return matching closed generic attributes (e.g., MyAttribute&gt;int&lt;)</param>
            <param name="warnings">A collection to fill with warning messages about attribute construction failure</param>
            <returns>The matching attributes that decorate the parameter</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes(System.Reflection.ParameterInfo,System.String)">
            <summary>
            Gets all the custom attributes for the parameter that are of the given attribute type.
            </summary>
            <param name="parameter">The parameter to get custom attributes for.</param>
            <param name="assemblyQualifiedTypeName">The type of the attribute to find. Will accept attribute types that are concrete,
            closed generic, and open generic. When provided an open generic type (e.g., MyAttribute&lt;&gt;) it will
            return matching closed generic attributes (e.g., MyAttribute&gt;int&lt;)</param>
            <returns>The matching attributes that decorate the parameter</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes(System.Reflection.ParameterInfo,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Gets all the custom attributes for the parameter that are of the given attribute type.
            </summary>
            <param name="parameter">The parameter to get custom attributes for.</param>
            <param name="assemblyQualifiedTypeName">The type of the attribute to find. Will accept attribute types that are concrete,
            closed generic, and open generic. When provided an open generic type (e.g., MyAttribute&lt;&gt;) it will
            return matching closed generic attributes (e.g., MyAttribute&gt;int&lt;)</param>
            <param name="warnings">A collection to fill with warning messages about attribute construction failure</param>
            <returns>The matching attributes that decorate the parameter</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes``1(System.Reflection.ParameterInfo)">
            <summary>
            Gets all the custom attributes for the parameter that are of the given attribute type.
            </summary>
            <param name="parameter">The parameter to get custom attributes for.</param>
            <returns>The matching attributes that decorate the parameter</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes``1(System.Reflection.ParameterInfo,System.Collections.Generic.List{System.String})">
            <summary>
            Gets all the custom attributes for the parameter that are of the given attribute type.
            </summary>
            <param name="parameter">The parameter to get custom attributes for.</param>
            <param name="warnings">A collection to fill with warning messages about attribute construction failure</param>
            <returns>The matching attributes that decorate the parameter</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes(System.Type,System.Type)">
            <summary>
            Gets all the custom attributes for the type that are of the given attribute type.
            </summary>
            <param name="type">The type to get custom attributes for.</param>
            <param name="attributeType">The type of the attribute to find. Will accept attribute types that are concrete,
            closed generic, and open generic. When provided an open generic type (e.g., MyAttribute&lt;&gt;) it will
            return matching closed generic attributes (e.g., MyAttribute&gt;int&lt;)</param>
            <returns>The matching attributes that decorate the type</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes(System.Type,System.Type,System.Collections.Generic.List{System.String})">
            <summary>
            Gets all the custom attributes for the type that are of the given attribute type.
            </summary>
            <param name="type">The type to get custom attributes for.</param>
            <param name="attributeType">The type of the attribute to find. Will accept attribute types that are concrete,
            closed generic, and open generic. When provided an open generic type (e.g., MyAttribute&lt;&gt;) it will
            return matching closed generic attributes (e.g., MyAttribute&gt;int&lt;)</param>
            <param name="warnings">A collection to fill with warning messages about attribute construction failure</param>
            <returns>The matching attributes that decorate the type</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes(System.Type,System.String)">
            <summary>
            Gets all the custom attributes for the type that are of the given attribute type.
            </summary>
            <param name="type">The type to get custom attributes for.</param>
            <param name="assemblyQualifiedTypeName">The type of the attribute to find. Will accept attribute types that are concrete,
            closed generic, and open generic. When provided an open generic type (e.g., MyAttribute&lt;&gt;) it will
            return matching closed generic attributes (e.g., MyAttribute&gt;int&lt;)</param>
            <returns>The matching attributes that decorate the type</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes(System.Type,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Gets all the custom attributes for the type that are of the given attribute type.
            </summary>
            <param name="type">The type to get custom attributes for.</param>
            <param name="assemblyQualifiedTypeName">The type of the attribute to find. Will accept attribute types that are concrete,
            closed generic, and open generic. When provided an open generic type (e.g., MyAttribute&lt;&gt;) it will
            return matching closed generic attributes (e.g., MyAttribute&gt;int&lt;)</param>
            <param name="warnings">A collection to fill with warning messages about attribute construction failure</param>
            <returns>The matching attributes that decorate the type</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes``1(System.Type)">
            <summary>
            Gets all the custom attributes for the type that are of the given attribute type.
            </summary>
            <param name="type">The type to get custom attributes for.</param>
            <returns>The matching attributes that decorate the type</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.GetMatchingCustomAttributes``1(System.Type,System.Collections.Generic.List{System.String})">
            <summary>
            Gets all the custom attributes for the type that are of the given attribute type.
            </summary>
            <param name="type">The type to get custom attributes for.</param>
            <param name="warnings">A collection to fill with warning messages about attribute construction failure</param>
            <returns>The matching attributes that decorate the type</returns>
            <remarks>
            This method safely skips attributes that throw in their constructor.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.Implements(System.Type,System.Type)">
            <summary>
            Determines if the given type implements the given interface.
            </summary>
            <param name="type">The type to check</param>
            <param name="interfaceType">The interface type to look for</param>
            <returns>Returns <c>true</c> if the type implements the interface; <c>false</c>, otherwise</returns>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.IsFromLocalAssembly(System.Type)">
            <summary>
            Determines if the given type is from a local assembly.
            </summary>
            <param name="type">The type to verify</param>
            <returns>Returns <c>true</c> if the type originates in a local assembly; <c>false</c> if the type originates in the GAC.</returns>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.IsNullable(System.Type)">
            <summary>
            Determines whether <paramref name="type"/> is a nullable type; that is, whether it
            is a reference type or it represents <see cref="T:System.Nullable`1"/> for a value type.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.IsNullableEnum(System.Type)">
            <summary>
            Determines whether <paramref name="type"/> represents a nullable enum value.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.ResolveGenericTypes(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Resolves all the generic types for a test method. The arguments are used to determine
            the best matching generic types for the method that can be satisfied by all the generic
            parameters and their argument values.
            </summary>
            <param name="method">The method</param>
            <param name="arguments">The argument values being passed to the method</param>
            <returns>The best matching generic types</returns>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.ResolveMethodArguments(System.Reflection.MethodBase,System.Object[])">
            <summary>
            Resolves argument values for the test method, ensuring they are the correct type,
            including support for optional method arguments.
            </summary>
            <param name="testMethod">The test method to resolve.</param>
            <param name="arguments">The user-supplied method arguments.</param>
            <returns>The argument values</returns>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.SafeName(System.Type)">
            <summary>
            Gets a fully qualified type name (i.e., <see cref="P:System.Type.FullName"/>), falling back to a simple
            type name (i.e., <see cref="P:System.Reflection.MemberInfo.Name"/>) when a fully qualified name is not available. Typically
            used when presenting type names to the user, or to guarantee the type name is never <c>null</c>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.ToCommaSeparatedList(System.Collections.Generic.IEnumerable{System.Type},System.String)">
            <summary>
            Convert a collection of <see cref="T:System.Type"/> objects into a comma-separated list
            for display purposes.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.ToDisplayName(System.Type)">
            <summary>
            Converts a type into a name string for display purposes. It attempts to make a more user friendly
            name than <see cref="P:System.Type.FullName"/> would give, especially when the type is generic.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.ToSimpleName(System.Type)">
            <summary>
            Gets the simple name for a type, suitable for use with <see cref="P:Xunit.Sdk.ITestCaseMetadata.TestClassSimpleName"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.ToVSTestTypeName(System.Type,System.Reflection.MethodInfo,System.Type)">
            <summary>
            Converts a <see cref="T:System.Type"/> name into the correct form for VSTest managed type name for
            using in managed TestCase properties and by xunit.runner.visualstudio.
            </summary>
            <remarks>
            See <see href="https://github.com/microsoft/vstest/blob/main/docs/RFCs/0017-Managed-TestCase-Properties.md"/>
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.ReflectionExtensions.UnwrapNullable(System.Type)">
            <summary>
            Attempts to strip <see cref="T:System.Nullable`1"/> from a type value and just return T.
            For non-nullable types, will return the type that was passed in.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestOptionsNames">
            <summary>
            Test options names
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestOptionsNames.Discovery">
            <summary>
            Test options names used with <see cref="T:Xunit.Sdk.ITestFrameworkDiscoveryOptions"/>.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Discovery.Culture">
            <summary>
            The culture to be used for discovery. <c>null</c> means the default system culture,
            <see cref="F:System.String.Empty"/> means the invariant culture, and any other value is assumed
            to be a culture name that the system understands.
            </summary>
            <remarks>
            Value type: <see cref="T:System.String"/><br/>
            Consumed by: v3
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Discovery.DiagnosticMessages">
            <summary>
            Set to <c>true</c> to enable display of diagnostic messages.
            </summary>
            <remarks>
            Value type: <see cref="T:System.Boolean"/><br/>
            Consumed by: v2, v3
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Discovery.IncludeSourceInformation">
            <summary>
            Set to <c>true</c> to include source information during discovery, when possible. (Note that
            most source information is applied by the runner, not the discoverer, because it utilizes the
            <c>DiaSession</c> support provided by Visual Studio, which means it's applied after the fact
            by <c>xunit.runner.visualstudio</c>. This flag, then, is a signal for custom test frameworks
            that may be able to provide source information via some other mechanism.)
            </summary>
            <remarks>
            Value type: <see cref="T:System.Boolean"/><br/>
            Consumed by: v3
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Discovery.InternalDiagnosticMessages">
            <summary>
            Set to <c>true</c> to enable display of internal diagnostic messages.
            </summary>
            <remarks>
            Value type: <see cref="T:System.Boolean"/><br/>
            Consumed by: v2, v3
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Discovery.MethodDisplay">
            <summary>
            A flag which indicates how the default test method display name is calculated.
            </summary>
            <remarks>
            Value type: <see cref="T:Xunit.Sdk.TestMethodDisplay"/><br/>
            Consumed by: v2, v3
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Discovery.MethodDisplayOptions">
            <summary>
            A flag which indicates how the test method display name calculation can be modified by special
            naming patterns.
            </summary>
            <remarks>
            Value type: <see cref="T:Xunit.Sdk.TestMethodDisplayOptions"/><br/>
            Consumed by: v2, v3
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Discovery.PreEnumerateTheories">
            <summary>
            Set to <c>true</c> to enable pre-enumeration of theories during discovery.
            </summary>
            <remarks>
            Value type: <see cref="T:System.Boolean"/><br/>
            Consumed by: v2, v3
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Discovery.PrintMaxEnumerableLength">
            <summary>
            Sets the maximum number of items to print in a collection.
            </summary>
            <remarks>
            Value type: <see cref="T:System.Int32"/><br />
            Consumed by: v3 1.1.0+
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Discovery.PrintMaxObjectDepth">
            <summary>
            Sets the maximum recursive depth when printing object values.
            </summary>
            <remarks>
            Value type: <see cref="T:System.Int32"/><br />
            Consumed by: v3 1.1.0+
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Discovery.PrintMaxObjectMemberCount">
            <summary>
            Sets the maximum number of members to show when printing object values.
            </summary>
            <remarks>
            Value type: <see cref="T:System.Int32"/><br />
            Consumed by: v3 1.1.0+
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Discovery.PrintMaxStringLength">
            <summary>
            Sets the maximum length when printing a string value.
            </summary>
            <remarks>
            Value type: <see cref="T:System.Int32"/><br />
            Consumed by: v3 1.1.0+
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Discovery.SynchronousMessageReporting">
            <summary>
            Set to <c>true</c> to enable synchronous message reporting; set to <c>false</c> to enable
            asynchronous message reporting. Synchronous in this case means the system will wait for the
            runner to process a message before delivering the next one.
            </summary>
            <remarks>
            Value type: <see cref="T:System.Boolean"/><br/>
            Consumed by: v2, v3
            </remarks>
        </member>
        <member name="T:Xunit.Sdk.TestOptionsNames.Execution">
            <summary>
            Test options names used with <see cref="T:Xunit.Sdk.ITestFrameworkExecutionOptions"/>.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Execution.AssertEquivalentMaxDepth">
            <summary>
            The maximum recursive depth for object comparisons with <c>Assert.Equivalent</c>.
            </summary>
            <remarks>
            Value type: <see cref="T:System.Int32"/><br />
            Consumed by: v3 1.1.0+
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Execution.Culture">
            <summary>
            The culture to be used for execution. <c>null</c> means the default system culture,
            <see cref="F:System.String.Empty"/> means the invariant culture, and any other value is assumed
            to be a culture name that the system understands.
            </summary>
            <remarks>
            Value type: <see cref="T:System.String"/><br/>
            Consumed by: v3
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Execution.DiagnosticMessages">
            <summary>
            Set to <c>true</c> to enable display of diagnostic messages.
            </summary>
            <remarks>
            Value type: <see cref="T:System.Boolean"/><br/>
            Consumed by: v2, v3
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Execution.DisableParallelization">
            <summary>
            Set to <c>true</c> to disable running tests in parallel.
            </summary>
            <remarks>
            Value type: <see cref="T:System.Boolean"/><br/>
            Consumed by: v2, v3
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Execution.ExplicitOption">
            <summary>
            Gets a flag which indicates the user's desire to run explicit tests.
            </summary>
            <remarks>
            Value type: <see cref="T:Xunit.Sdk.ExplicitOption"/><br/>
            Consumed by: v3
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Execution.FailSkips">
            <summary>
            Set to <c>true</c> to convert skipped tests into failed tests.
            </summary>
            <remarks>
            Value type: <see cref="T:System.Boolean"/><br/>
            Consumed by: v3
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Execution.FailTestsWithWarnings">
            <summary>
            Set to <c>true</c> to convert passing tests with warnings into failed tests.
            </summary>
            <remarks>
            Value type: <see cref="T:System.Boolean"/><br/>
            Consumed by: v3
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Execution.InternalDiagnosticMessages">
            <summary>
            Set to <c>true</c> to enable display of internal diagnostic messages.
            </summary>
            <remarks>
            Value type: <see cref="T:System.Boolean"/><br/>
            Consumed by: v2, v3
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Execution.MaxParallelThreads">
            <summary>
            Sets the maximum number of parallel threads to use during execution. Set to <c>-1</c>
            to run with unlimited threads; set to <c>0</c> to use the system default (equal to
            <see cref="P:System.Environment.ProcessorCount"/>; set to any other positive integer to use
            that number of threads.
            </summary>
            <remarks>
            Value type: <see cref="T:System.Int32"/><br/>
            Consumed by: v2, v3
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Execution.ParallelAlgorithm">
            <summary>
            Set the algorithm to use for parallelization.
            </summary>
            <remarks>
            Value type: <see cref="T:Xunit.Sdk.ParallelAlgorithm"/><br/>
            Consumed by: v2, v3
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Execution.PrintMaxEnumerableLength">
            <summary>
            Sets the maximum number of items to print in a collection.
            </summary>
            <remarks>
            Value type: <see cref="T:System.Int32"/><br />
            Consumed by: v3 1.1.0+
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Execution.PrintMaxObjectDepth">
            <summary>
            Sets the maximum recursive depth when printing object values.
            </summary>
            <remarks>
            Value type: <see cref="T:System.Int32"/><br />
            Consumed by: v3 1.1.0+
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Execution.PrintMaxObjectMemberCount">
            <summary>
            Sets the maximum number of members to show when printing object values.
            </summary>
            <remarks>
            Value type: <see cref="T:System.Int32"/><br />
            Consumed by: v3 1.1.0+
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Execution.PrintMaxStringLength">
            <summary>
            Sets the maximum length when printing a string value.
            </summary>
            <remarks>
            Value type: <see cref="T:System.Int32"/><br />
            Consumed by: v3 1.1.0+
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Execution.Seed">
            <summary>
            Set the seed to use for randomization. When unset (or set to <c>null</c>), will use the default
            system-computed seed.
            </summary>
            <remarks>
            Value type: <see cref="T:System.Int32"/><br/>
            Consumed by: v3
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Execution.ShowLiveOutput">
            <summary>
            Set to <c>true</c> to show output live while tests are running, in addition to showing collected output
            when the test has finished.
            </summary>
            <remarks>
            Value type: <see cref="T:System.Boolean"/><br/>
            Consumed by: v2, v3
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Execution.StopOnFail">
            <summary>
            Set to <c>true</c> to attempt to stop execution as soon the first test fails.
            </summary>
            <remarks>
            Value type: <see cref="T:System.Boolean"/><br/>
            Consumed by: v2, v3
            </remarks>
        </member>
        <member name="F:Xunit.Sdk.TestOptionsNames.Execution.SynchronousMessageReporting">
            <summary>
            Set to <c>true</c> to enable synchronous message reporting; set to <c>false</c> to enable
            asynchronous message reporting. Synchronous in this case means the system will wait for the
            runner to process a message before delivering the next one.
            </summary>
            <remarks>
            Value type: <see cref="T:System.Boolean"/><br/>
            Consumed by: v2, v3
            </remarks>
        </member>
        <member name="T:Xunit.Sdk.IJsonDeserializable">
            <summary>
            Indicates that an object can be deserialized from string-serialized JSON.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.IJsonDeserializable.FromJson(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Deserializes the object's values from the provided JSON.
            </summary>
            <param name="root">The root of the deserialized JSON object</param>
        </member>
        <member name="T:Xunit.Sdk.IJsonSerializable">
            <summary>
            Interface that indicates an object can be serialized to JSON.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.IJsonSerializable.ToJson">
            <summary>
            Converts the given object to JSON.
            </summary>
            <returns>
            Returns the object in JSON form, if possible; returns <c>null</c> if the object
            cannot be represented in JSON form.
            </returns>
        </member>
        <member name="T:Xunit.Sdk.JsonArraySerializer">
            <summary>
            A special-purpose streaming serializer for arrays to JSON. Only supports a limited number of
            types (boolean, DateTimeOffset, decimal, Enum, int, long, string, and trait dictionaries).
            </summary>
            <remarks>
            These types are made public for third parties only for the purpose of serializing and
            deserializing messages that are sent across the process boundary (that is, types which
            implement <see cref="T:Xunit.Sdk.IMessageSinkMessage"/>). Any other usage is not supported.
            </remarks>
            <param name="buffer">The buffer to write JSON to</param>
            <param name="disposeNotifier">An optional callback to be notified when disposed</param>
        </member>
        <member name="M:Xunit.Sdk.JsonArraySerializer.#ctor(System.Text.StringBuilder,System.Action)">
            <summary>
            A special-purpose streaming serializer for arrays to JSON. Only supports a limited number of
            types (boolean, DateTimeOffset, decimal, Enum, int, long, string, and trait dictionaries).
            </summary>
            <remarks>
            These types are made public for third parties only for the purpose of serializing and
            deserializing messages that are sent across the process boundary (that is, types which
            implement <see cref="T:Xunit.Sdk.IMessageSinkMessage"/>). Any other usage is not supported.
            </remarks>
            <param name="buffer">The buffer to write JSON to</param>
            <param name="disposeNotifier">An optional callback to be notified when disposed</param>
        </member>
        <member name="M:Xunit.Sdk.JsonArraySerializer.Serialize(System.Nullable{System.Boolean})">
            <summary>
            Serialize a <see cref="T:System.Boolean"/> value into the array.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.JsonArraySerializer.Serialize(System.Nullable{System.DateTimeOffset})">
            <summary>
            Serialize a <see cref="T:System.DateTimeOffset"/> value into the array.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Xunit.Sdk.JsonArraySerializer.Serialize(System.Nullable{System.Decimal})">
            <summary>
            Serialize a <see cref="T:System.Decimal"/> value into the array.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.JsonArraySerializer.Serialize(System.Enum)">
            <summary>
            Serialize an <see cref="T:System.Enum"/> value into the array.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.JsonArraySerializer.Serialize(System.Nullable{System.Int32})">
            <summary>
            Serialize an <see cref="T:System.Int32"/> value into the array.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.JsonArraySerializer.Serialize(System.Nullable{System.Int64})">
            <summary>
            Serialize a <see cref="T:System.Int64"/> value into the array.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.JsonArraySerializer.Serialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Collections.Generic.IReadOnlyCollection{System.String}})">
            <summary>
            Serialize a trait dictionary value into the array.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.JsonArraySerializer.Serialize(System.String)">
            <summary>
            Serialize a <see cref="T:System.String"/> value into the array.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.JsonArraySerializer.SerializeArray">
            <summary>
            Start serializing an array into the array.
            </summary>
            <remarks>
            IMPORTANT: This serializer must be used completely and disposed before any other value
            is serialized into the array, or the serialization will be corrupted.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.JsonArraySerializer.SerializeObject">
            <summary>
            Start serializing an object into the array.
            </summary>
            <remarks>
            IMPORTANT: This serializer must be used completely and disposed before any other value
            is serialized into the array, or the serialization will be corrupted.
            </remarks>
        </member>
        <member name="T:Xunit.Sdk.JsonDeserializer">
            <summary>
            A special-purpose untyped deserializer for JSON. JSON strings are returned as <see cref="T:System.String"/>,
            JSON numbers are returned as <see cref="T:System.Decimal"/>, JSON booleans are returns as <see cref="T:System.Boolean"/>,
            JSON objects are returned as <c>IReadOnlyDictionary&lt;string, object?&gt;</c>, JSON arrays are
            returned as <c>object?[]</c>, and JSON null values are returned as <c>null</c>. Static methods exist
            here to help retrieve values from object dictionaries as well as convert to the commonly supported
            data types (<see cref="T:System.Boolean"/>, <see cref="T:System.DateTimeOffset"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Enum"/>,
            <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.String"/>, and trait dictionaries (which are
            decoded to <c>IReadOnlyDictionary&lt;string, IReadOnlyList&lt;string&gt;&gt;</c>), as well as arrays
            of all the supported types (except trait dictionaries). Developers who need support for other types
            are encouraged to encode and decode then as strings as needed (for examples, you can see how
            <see cref="T:System.Enum"/> and <see cref="T:System.DateTimeOffset"/> values are handled here).
            </summary>
            <remarks>
            These types are made public for third parties only for the purpose of serializing and
            deserializing messages that are sent across the process boundary (that is, types which
            implement <see cref="T:Xunit.Sdk.IMessageSinkMessage"/>). Any other usage is not supported.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryDeserialize(System.String,System.Object@)">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetArray(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <summary>
            Tries to get an untyped array value from a deserialized JSON object.
            </summary>
            <param name="obj">The deserialized JSON object</param>
            <param name="key">The key for the value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetArray(System.Object)">
            <summary>
            Tries to get an untyped array value from a deserialized JSON value.
            </summary>
            <param name="value">The deserialized JSON value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetArrayOfBoolean(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <summary>
            Tries to get an array of <see cref="T:System.Boolean"/> values from a deserialized JSON
            object. If the value isn't an array, or if any of the values in the array
            aren't compatible with <see cref="T:System.Boolean"/>, then returns <c>null</c>.
            Null values in the array are not permitted.
            </summary>
            <param name="obj">The deserialized JSON object</param>
            <param name="key">The key for the value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetArrayOfBoolean(System.Object)">
            <summary>
            Tries to get an array of <see cref="T:System.Boolean"/> values from a deserialized JSON
            value. If the value isn't an array, or if any of the values in the array
            aren't compatible with <see cref="T:System.Boolean"/>, then returns <c>null</c>.
            Null values in the array are not permitted.
            </summary>
            <param name="value">The deserialized JSON value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetArrayOfDateTimeOffset(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <summary>
            Tries to get an array of <see cref="T:System.DateTimeOffset"/> values from a deserialized JSON
            object. If the value isn't an array, or if any of the values in the array
            aren't compatible with <see cref="T:System.DateTimeOffset"/>, then returns <c>null</c>.
            Null values in the array are not permitted.
            </summary>
            <param name="obj">The deserialized JSON object</param>
            <param name="key">The key for the value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetArrayOfDateTimeOffset(System.Object)">
            <summary>
            Tries to get an array of <see cref="T:System.DateTimeOffset"/> values from a deserialized JSON
            value. If the value isn't an array, or if any of the values in the array
            aren't compatible with <see cref="T:System.DateTimeOffset"/>, then returns <c>null</c>.
            Null values in the array are not permitted.
            </summary>
            <param name="value">The deserialized JSON value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetArrayOfDecimal(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <summary>
            Tries to get an array of <see cref="T:System.Decimal"/> values from a deserialized JSON
            object. If the value isn't an array, or if any of the values in the array
            aren't compatible with <see cref="T:System.Decimal"/>, then returns <c>null</c>.
            Null values in the array are not permitted.
            </summary>
            <param name="obj">The deserialized JSON object</param>
            <param name="key">The key for the value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetArrayOfDecimal(System.Object)">
            <summary>
            Tries to get an array of <see cref="T:System.Decimal"/> values from a deserialized JSON
            value. If the value isn't an array, or if any of the values in the array
            aren't compatible with <see cref="T:System.Decimal"/>, then returns <c>null</c>.
            Null values in the array are not permitted.
            </summary>
            <param name="value">The deserialized JSON value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetArrayOfEnum``1(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <summary>
            Tries to get an array of <typeparamref name="TEnum"/> values from a deserialized JSON
            object. If the value isn't an array, or if any of the values in the array
            aren't compatible with <typeparamref name="TEnum"/>, then returns <c>null</c>.
            Null values in the array are not permitted.
            </summary>
            <param name="obj">The deserialized JSON object</param>
            <param name="key">The key for the value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetArrayOfEnum``1(System.Object)">
            <summary>
            Tries to get an array of <typeparamref name="TEnum"/> values from a deserialized JSON
            value. If the value isn't an array, or if any of the values in the array
            aren't compatible with <typeparamref name="TEnum"/>, then returns <c>null</c>.
            Null values in the array are not permitted.
            </summary>
            <param name="value">The deserialized JSON value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetArrayOfInt(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <summary>
            Tries to get an array of <see cref="T:System.Int32"/> values from a deserialized JSON
            object. If the value isn't an array, or if any of the values in the array
            aren't compatible with <see cref="T:System.Int32"/>, then returns <c>null</c>.
            Null values in the array are not permitted.
            </summary>
            <param name="obj">The deserialized JSON object</param>
            <param name="key">The key for the value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetArrayOfInt(System.Object)">
            <summary>
            Tries to get an array of <see cref="T:System.Int32"/> values from a deserialized JSON
            value. If the value isn't an array, or if any of the values in the array
            aren't compatible with <see cref="T:System.Int32"/>, then returns <c>null</c>.
            Null values in the array are not permitted.
            </summary>
            <param name="value">The deserialized JSON value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetArrayOfLong(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <summary>
            Tries to get an array of <see cref="T:System.Int64"/> values from a deserialized JSON
            object. If the value isn't an array, or if any of the values in the array
            aren't compatible with <see cref="T:System.Int64"/>, then returns <c>null</c>.
            Null values in the array are not permitted.
            </summary>
            <param name="obj">The deserialized JSON object</param>
            <param name="key">The key for the value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetArrayOfLong(System.Object)">
            <summary>
            Tries to get an array of <see cref="T:System.Int64"/> values from a deserialized JSON
            value. If the value isn't an array, or if any of the values in the array
            aren't compatible with <see cref="T:System.Int64"/>, then returns <c>null</c>.
            Null values in the array are not permitted.
            </summary>
            <param name="value">The deserialized JSON value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetArrayOfNullableString(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <summary>
            Tries to get an array of <see cref="T:System.String"/> values from a deserialized JSON
            object. If the value isn't an array, or if any of the values in the array
            aren't compatible with <see cref="T:System.String"/>, then returns <c>null</c>.
            Null values in the array are permitted.
            </summary>
            <param name="obj">The deserialized JSON object</param>
            <param name="key">The key for the value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetArrayOfNullableString(System.Object)">
            <summary>
            Tries to get an array of <see cref="T:System.String"/> values from a deserialized JSON
            value. If the value isn't an array, or if any of the values in the array
            aren't compatible with <see cref="T:System.String"/>, then returns <c>null</c>.
            Null values in the array are permitted.
            </summary>
            <param name="value">The deserialized JSON value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetArrayOfString(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <summary>
            Tries to get an array of <see cref="T:System.String"/> values from a deserialized JSON
            object. If the value isn't an array, or if any of the values in the array
            aren't compatible with <see cref="T:System.String"/>, then returns <c>null</c>.
            Null values in the array are not permitted.
            </summary>
            <param name="obj">The deserialized JSON object</param>
            <param name="key">The key for the value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetArrayOfString(System.Object)">
            <summary>
            Tries to get an array of <see cref="T:System.String"/> values from a deserialized JSON
            value. If the value isn't an array, or if any of the values in the array
            aren't compatible with <see cref="T:System.String"/>, then returns <c>null</c>.
            Null values in the array are not permitted.
            </summary>
            <param name="value">The deserialized JSON value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetBoolean(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <summary>
            Tries to get a <see cref="T:System.Boolean"/> value from a deserialized JSON object.
            </summary>
            <param name="obj">The deserialized JSON object</param>
            <param name="key">The key for the value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetBoolean(System.Object)">
            <summary>
            Tries to get a <see cref="T:System.Boolean"/> value from a deserialized JSON value.
            </summary>
            <param name="value">The deserialized JSON value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetDateTimeOffset(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <summary>
            Tries to get a <see cref="T:System.DateTimeOffset"/> value from a deserialized JSON object.
            </summary>
            <param name="obj">The deserialized JSON object</param>
            <param name="key">The key for the value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetDateTimeOffset(System.Object)">
            <summary>
            Tries to get a <see cref="T:System.DateTimeOffset"/> value from a deserialized JSON value.
            </summary>
            <param name="value">The deserialized JSON value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetDecimal(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <summary>
            Tries to get a <see cref="T:System.Decimal"/> value from a deserialized JSON object.
            </summary>
            <param name="obj">The deserialized JSON object</param>
            <param name="key">The key for the value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetDecimal(System.Object)">
            <summary>
            Tries to get a <see cref="T:System.Decimal"/> value from a deserialized JSON value.
            </summary>
            <param name="value">The deserialized JSON value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetEnum``1(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <summary>
            Tries to get an <see cref="T:System.Enum"/> value from a deserialized JSON object.
            </summary>
            <param name="obj">The deserialized JSON object</param>
            <param name="key">The key for the value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetEnum``1(System.Object)">
            <summary>
            Tries to get an <see cref="T:System.Enum"/> value from a deserialized JSON value.
            </summary>
            <param name="value">The deserialized JSON value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetInt(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <summary>
            Tries to get an <see cref="T:System.Int32"/> value from a deserialized JSON object.
            </summary>
            <param name="obj">The deserialized JSON object</param>
            <param name="key">The key for the value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetInt(System.Object)">
            <summary>
            Tries to get an <see cref="T:System.Int32"/> value from a deserialized JSON value.
            </summary>
            <param name="value">The deserialized JSON value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetLong(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <summary>
            Tries to get a <see cref="T:System.Int64"/> value from a deserialized JSON object.
            </summary>
            <param name="obj">The deserialized JSON object</param>
            <param name="key">The key for the value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetLong(System.Object)">
            <summary>
            Tries to get an <see cref="T:System.Int64"/> value from a deserialized JSON value.
            </summary>
            <param name="value">The deserialized JSON value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetObject(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <summary>
            Tries to get an untyped object value from a deserialized JSON object.
            </summary>
            <param name="obj">The deserialized JSON object</param>
            <param name="key">The key for the value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetObject(System.Object)">
            <summary>
            Tries to get an untyped object value from a deserialized JSON value.
            </summary>
            <param name="value">The deserialized JSON value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetString(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String,System.Boolean)">
            <summary>
            Tries to get a <see cref="T:System.String"/> value from a deserialized JSON object.
            </summary>
            <param name="obj">The deserialized JSON object</param>
            <param name="key">The key for the value</param>
            <param name="defaultEmptyString">Flag to indicate if a default empty string should be returned instead of <c>null</c></param>
            <returns>Returns the value if present; <c>null</c>, otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetString(System.Object,System.Boolean)">
            <summary>
            Tries to get an <see cref="T:System.Int64"/> value from a deserialized JSON value.
            </summary>
            <param name="value">The deserialized JSON value</param>
            <param name="defaultEmptyString">Flag to indicate if a default empty string should be returned instead of <c>null</c></param>
            <returns>Returns the value if present; <c>null</c>, otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetTraits(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String,System.Boolean)">
            <summary>
            Tries to get a trait dictionary value from a deserialized JSON object.
            </summary>
            <param name="obj">The deserialized JSON object</param>
            <param name="key">The key for the value</param>
            <param name="defaultEmptyDictionary">Flag to indicate if a default empty dictionary should be returned instead of <c>null</c></param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetVersion(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <summary>
            Tries to get a <see cref="T:System.Version"/> value from a deserialized JSON object.
            </summary>
            <param name="obj">The deserialized JSON object</param>
            <param name="key">The key for the value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetVersion(System.Object)">
            <summary>
            Tries to get a <see cref="T:System.Version"/> value from a deserialized JSON value.
            </summary>
            <param name="value">The deserialized JSON value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonDeserializer.TryGetTraits(System.Object)">
            <summary>
            Tries to get a <see cref="T:System.String"/> value from a deserialized JSON value.
            </summary>
            <param name="value">The deserialized JSON value</param>
            <returns>Returns the value if present; <c>null</c>, otherwise.</returns>
        </member>
        <member name="T:Xunit.Sdk.JsonObjectSerializer">
            <summary>
            A special-purpose streaming serializer for objects to JSON. Only supports a limited number of type
            (boolean, DateTimeOffset, decimal, Enum, int, long, string, and trait dictionaries).
            </summary>
            <remarks>
            These types are made public for third parties only for the purpose of serializing and
            deserializing messages that are sent across the process boundary (that is, types which
            implement <see cref="T:Xunit.Sdk.IMessageSinkMessage"/>). Any other usage is not supported.
            </remarks>
            <param name="buffer">The buffer to write JSON to</param>
            <param name="disposeNotifier">An optional callback to be notified when disposed</param>
        </member>
        <member name="M:Xunit.Sdk.JsonObjectSerializer.#ctor(System.Text.StringBuilder,System.Action)">
            <summary>
            A special-purpose streaming serializer for objects to JSON. Only supports a limited number of type
            (boolean, DateTimeOffset, decimal, Enum, int, long, string, and trait dictionaries).
            </summary>
            <remarks>
            These types are made public for third parties only for the purpose of serializing and
            deserializing messages that are sent across the process boundary (that is, types which
            implement <see cref="T:Xunit.Sdk.IMessageSinkMessage"/>). Any other usage is not supported.
            </remarks>
            <param name="buffer">The buffer to write JSON to</param>
            <param name="disposeNotifier">An optional callback to be notified when disposed</param>
        </member>
        <member name="M:Xunit.Sdk.JsonObjectSerializer.Serialize(System.String,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Serialize a <see cref="T:System.Boolean"/> value into the object.
            </summary>
            <param name="key">The name of the value</param>
            <param name="value">The value</param>
            <param name="includeNullValues">Set to <c>true</c> to serialize a <c>null</c> value, or <c>false</c> to skip it</param>
        </member>
        <member name="M:Xunit.Sdk.JsonObjectSerializer.Serialize(System.String,System.Nullable{System.DateTimeOffset},System.Boolean)">
            <summary>
            Serialize a <see cref="T:System.DateTimeOffset"/> value into the object.
            </summary>
            <param name="key">The name of the value</param>
            <param name="value">The value</param>
            <param name="includeNullValues">Set to <c>true</c> to serialize a <c>null</c> value, or <c>false</c> to skip it</param>
        </member>
        <member name="M:Xunit.Sdk.JsonObjectSerializer.Serialize(System.String,System.Nullable{System.Decimal},System.Boolean)">
            <summary>
            Serialize a <see cref="T:System.Decimal"/> value into the object.
            </summary>
            <param name="key">The name of the value</param>
            <param name="value">The value</param>
            <param name="includeNullValues">Set to <c>true</c> to serialize a <c>null</c> value, or <c>false</c> to skip it</param>
        </member>
        <member name="M:Xunit.Sdk.JsonObjectSerializer.Serialize(System.String,System.Enum,System.Boolean)">
            <summary>
            Serialize an <see cref="T:System.Enum"/> value into the object.
            </summary>
            <param name="key">The name of the value</param>
            <param name="value">The value</param>
            <param name="includeNullValues">Set to <c>true</c> to serialize a <c>null</c> value, or <c>false</c> to skip it</param>
        </member>
        <member name="M:Xunit.Sdk.JsonObjectSerializer.Serialize(System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Serialize an <see cref="T:System.Int32"/> value into the object.
            </summary>
            <param name="key">The name of the value</param>
            <param name="value">The value</param>
            <param name="includeNullValues">Set to <c>true</c> to serialize a <c>null</c> value, or <c>false</c> to skip it</param>
        </member>
        <member name="M:Xunit.Sdk.JsonObjectSerializer.Serialize(System.String,System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Serialize a <see cref="T:System.Int64"/> value into the object.
            </summary>
            <param name="key">The name of the value</param>
            <param name="value">The value</param>
            <param name="includeNullValues">Set to <c>true</c> to serialize a <c>null</c> value, or <c>false</c> to skip it</param>
        </member>
        <member name="M:Xunit.Sdk.JsonObjectSerializer.Serialize(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Serialize a <see cref="T:System.String"/> value into the object.
            </summary>
            <param name="key">The name of the value</param>
            <param name="value">The value</param>
            <param name="includeNullValues">Set to <c>true</c> to serialize a <c>null</c> value, or <c>false</c> to skip it</param>
            <param name="includeEmptyValues">Set to <c>true</c> to serialize empty strings, or <c>false</c> to skip it</param>
        </member>
        <member name="M:Xunit.Sdk.JsonObjectSerializer.Serialize(System.String,System.Version,System.Boolean)">
            <summary>
            Serialize a <see cref="T:System.Version"/> value into the object.
            </summary>
            <param name="key">The name of the value</param>
            <param name="value">The value</param>
            <param name="includeNullValues">Set to <c>true</c> to serialize a <c>null</c> value, or <c>false</c> to skip it</param>
        </member>
        <member name="M:Xunit.Sdk.JsonObjectSerializer.SerializeArray(System.String)">
            <summary>
            Start serializing an array into the object.
            </summary>
            <param name="key">The name of the array</param>
            <remarks>
            IMPORTANT: This serializer must be used completely and disposed before any other value
            is serialized into the object, or the serialization would be corrupted.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.JsonObjectSerializer.SerializeNull(System.String)">
            <summary>
            Serialize a null value into the object.
            </summary>
            <param name="key">The name of the null value</param>
        </member>
        <member name="M:Xunit.Sdk.JsonObjectSerializer.SerializeObject(System.String)">
            <summary>
            Start serializing an object into the object.
            </summary>
            <param name="key">The name of the object</param>
            <remarks>
            IMPORTANT: This serializer must be used completely and disposed before any other value
            is serialized into the object, or the serialization would be corrupted.
            </remarks>
        </member>
        <member name="T:Xunit.Sdk.JsonSerializerBase">
            <summary>
            Base class used for streaming JSON serialization.
            </summary>
            <remarks>
            These types are made public for third parties only for the purpose of serializing and
            deserializing messages that are sent across the process boundary (that is, types which
            implement <see cref="T:Xunit.Sdk.IMessageSinkMessage"/>). Any other usage is not supported.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.JsonSerializerBase.#ctor(System.Text.StringBuilder,System.Action,System.Nullable{System.Char},System.Nullable{System.Char})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.JsonSerializerBase"/> class.
            </summary>
            <param name="buffer">The buffer to write JSON to</param>
            <param name="disposeNotifier">A callback to be notified when disposed</param>
            <param name="open">The character to write when starting (i.e., '[' for arrays)</param>
            <param name="close">The character to write when finishing (i.e., ']' for arrays)</param>
        </member>
        <member name="M:Xunit.Sdk.JsonSerializerBase.Dispose">
            <summary/>
        </member>
        <member name="P:Xunit.Sdk.JsonSerializerBase.Buffer">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.JsonSerializerBase.WriteSeparator">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.JsonSerializerBase.WriteValue(System.Nullable{System.Boolean})">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.JsonSerializerBase.WriteValue(System.Nullable{System.DateTimeOffset})">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.JsonSerializerBase.WriteValue(System.Nullable{System.Decimal})">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.JsonSerializerBase.WriteValue(System.Enum)">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.JsonSerializerBase.WriteValue(System.Nullable{System.Int32})">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.JsonSerializerBase.WriteValue(System.Nullable{System.Int64})">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.JsonSerializerBase.WriteValue(System.String)">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.JsonSerializerBase.WriteValue(System.Version)">
            <summary/>
        </member>
        <member name="T:Xunit.Sdk.JsonTypeIDAttribute">
            <summary>
            Used to decorate concrete serializable classes that implement <see cref="T:Xunit.Sdk.IMessageSinkMessage"/> to
            indicate what the serialized type ID should be. The type IDs must be unique, and only assigned to
            concrete types that will be serialized and deserialized.
            </summary>
            <remarks>
            These types are made public for third parties only for the purpose of serializing and
            deserializing messages that are sent across the process boundary (that is, types which
            implement <see cref="T:Xunit.Sdk.IMessageSinkMessage"/>). Any other usage is not supported.
            </remarks>
            <param name="id">The JSON type ID</param>
        </member>
        <member name="M:Xunit.Sdk.JsonTypeIDAttribute.#ctor(System.String)">
            <summary>
            Used to decorate concrete serializable classes that implement <see cref="T:Xunit.Sdk.IMessageSinkMessage"/> to
            indicate what the serialized type ID should be. The type IDs must be unique, and only assigned to
            concrete types that will be serialized and deserialized.
            </summary>
            <remarks>
            These types are made public for third parties only for the purpose of serializing and
            deserializing messages that are sent across the process boundary (that is, types which
            implement <see cref="T:Xunit.Sdk.IMessageSinkMessage"/>). Any other usage is not supported.
            </remarks>
            <param name="id">The JSON type ID</param>
        </member>
        <member name="P:Xunit.Sdk.JsonTypeIDAttribute.ID">
            <summary/>
        </member>
        <member name="T:Xunit.Sdk.ExplicitOption">
            <summary>
            Indicates how explicit tests should be handled during execution.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.ExplicitOption.Off">
            <summary>
            Indicates the non-explicit tests should be run, and explicit tests should not be run. This
            should be the default behavior in most runners.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.ExplicitOption.On">
            <summary>
            Indicates that both non-explicit and explicit tests should be run.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.ExplicitOption.Only">
            <summary>
            Indicates that non-explicit tests should not be run, and explicit tests should be run.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ExplicitOptionExtensions">
            <summary>
            Extension methods for <see cref="T:Xunit.Sdk.ExplicitOption"/>
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ExplicitOptionExtensions.IsValid(Xunit.Sdk.ExplicitOption)">
            <summary>
            Determines if the value is a valid enum value.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.FailureCause">
            <summary>
            Indicates the cause of the test failure.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.FailureCause.Unknown">
            <summary>
            Indicates the test failure cause is unknown.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.FailureCause.Other">
            <summary>
            Indicates that a test failed for some reason other than a typical execution failure
            (for example, if a test was skipped but the flag was given to fail all skipped tests,
            or the test passed with warnings but the flag was given to fail tests with warnings).
            </summary>
        </member>
        <member name="F:Xunit.Sdk.FailureCause.Exception">
            <summary>
            Indicates that the test failed because it threw an unhandled exception.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.FailureCause.Assertion">
            <summary>
            Indicates that the test failed because of an assertion failure (that is, an exception
            was thrown that implements an interface named <c>IAssertionException</c>, regardless of the
            namespace or source assembly of the interface). For built-in exceptions,
            <see cref="T:Xunit.Sdk.IAssertionException"/> serves this purpose, but this is generally
            found by convention rather than type to prevent 3rd party assertion libraries from needing
            to take an explicit references to xUnit.net binaries.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.FailureCause.Timeout">
            <summary>
            Indicates that the test failed because it exceeded the allowed time to run (typically
            specified via <see cref="P:Xunit.v3.IFactAttribute.Timeout"/>). This is indicated by an
            exception that is thrown which implements an interface named <c>ITestTimeoutException</c>,
            regardless of the namespace or source assembly of the interface. For fact attributes,
            <see cref="T:Xunit.v3.ITestTimeoutException"/> serves this purpose, but this is generally
            found by convention rather than type to prevent 3rd party libraries from needing to
            take an explicit reference to xUnit.net binaries.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ParallelAlgorithm">
            <summary>
            Indicates the parallelization algorithm to use.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.ParallelAlgorithm.Conservative">
            <summary>
            The conservative parallelization algorithm uses a semaphore to limit the number of started tests to be equal
            to the desired parallel thread count. This has the effect of allowing tests that have started to finish faster,
            since there are no extra tests competing for a chance to run, at the expense that CPU utilization will be lowered
            if the test project spawns a lot of async tests that have significant wait times.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.ParallelAlgorithm.Aggressive">
            <summary>
            The aggressive parallelization algorithm uses a synchronization context to limit the number of running tests
            to be equal to the desired parallel thread count. This has the effect of being able to use the CPU more
            effectively since there are typically most tests capable of running than there are CPU cores, at the
            expense of tests that have already started being put into the back of a long queue before they can run
            again.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ParallelAlgorithmExtensions">
            <summary>
            Extension methods for <see cref="T:Xunit.Sdk.ParallelAlgorithm"/>
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ParallelAlgorithmExtensions.IsValid(Xunit.Sdk.ParallelAlgorithm)">
            <summary>
            Determines if the value is a valid enum value.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestAttachment">
            <summary>
            Represents an attachment to a test result.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestAttachment.#ctor">
            <summary>
            Called by the de-serializer; should only be called by deriving classes for de-serialization purposes
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestAttachment.AttachmentType">
            <summary>
            Gets the type of the test attachment.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestAttachment.AsByteArray">
            <summary>
            Gets the attachment content as a byte array, along with the media type. Can only be called
            when <see cref="P:Xunit.Sdk.TestAttachment.AttachmentType"/> returns <see cref="F:Xunit.Sdk.TestAttachmentType.ByteArray"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestAttachment.AsString">
            <summary>
            Gets the attachment content as a string. Can only be called when <see cref="P:Xunit.Sdk.TestAttachment.AttachmentType"/>
            returns <see cref="F:Xunit.Sdk.TestAttachmentType.String"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestAttachment.Create(System.Byte[],System.String)">
            <summary>
            Creates an instance of <see cref="T:Xunit.Sdk.TestAttachment"/> that wraps a byte array value.
            </summary>
            <param name="value">The byte array value</param>
            <param name="mediaType">The media type</param>
            <remarks>
            The <paramref name="mediaType"/> value must be in the MIME "type/subtype" form, and does not support
            parameter values. The subtype is allowed to have a single "+" to denote specialization of the
            subtype (i.e., "application/xhtml+xml"). For more information on media types, see
            <see href="https://datatracker.ietf.org/doc/html/rfc2045#section-5.1"/>.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.TestAttachment.Create(System.String)">
            <summary>
            Creates an instance of <see cref="T:Xunit.Sdk.TestAttachment"/> that wraps a string value.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestAttachment.Parse(System.String)">
            <summary>
            Parses a value that was obtained by calling <see cref="M:Xunit.Sdk.TestAttachment.ToString"/> back into a <see cref="T:Xunit.Sdk.TestAttachment"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestAttachment.ToString">
            <summary>
            Gets a string value for the test attachment. For string value attachments, will return the string value;
            for byte array values, it will return the base-64 encoded value of the bytes.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestAttachmentType">
            <summary>
            Gets the type of the test attachment
            </summary>
        </member>
        <member name="F:Xunit.Sdk.TestAttachmentType.String">
            <summary>
            Indicates a test attachment that is a string.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.TestAttachmentType.ByteArray">
            <summary>
            Indicates a test attachment that is an array of bytes.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestMethodDisplay">
            <summary>
            Indicates the default display name format for test methods.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.TestMethodDisplay.ClassAndMethod">
            <summary>
            Use a fully qualified name (namespace + class + method)
            </summary>
        </member>
        <member name="F:Xunit.Sdk.TestMethodDisplay.Method">
            <summary>
            Use just the method name (without class)
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestMethodDisplayExtensions">
            <summary>
            Extension methods for <see cref="T:Xunit.Sdk.TestMethodDisplay"/>
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestMethodDisplayExtensions.IsValid(Xunit.Sdk.TestMethodDisplay)">
            <summary>
            Determines if the value is a valid enum value.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestMethodDisplayOptions">
            <summary>
            Indicates the method display options for test methods.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.TestMethodDisplayOptions.None">
            <summary>
            Indicates no additional method display options.
            </summary>
            <remarks>This is the default configuration option.</remarks>
        </member>
        <member name="F:Xunit.Sdk.TestMethodDisplayOptions.ReplaceUnderscoreWithSpace">
            <summary>
            Replace underscores in display names with a space.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.TestMethodDisplayOptions.UseOperatorMonikers">
            <summary>
            Replace well-known monikers with their equivalent operator.
            <list type="bullet">
            <item><description><c>lt</c> becomes <c>&lt;</c></description></item>
            <item><description><c>le</c> becomes <c>&lt;=</c></description></item>
            <item><description><c>eq</c> becomes <c>=</c></description></item>
            <item><description><c>ne</c> becomes <c>!=</c></description></item>
            <item><description><c>gt</c> becomes <c>&gt;</c></description></item>
            <item><description><c>ge</c> becomes <c>&gt;=</c></description></item>
            </list>
            </summary>
        </member>
        <member name="F:Xunit.Sdk.TestMethodDisplayOptions.UseEscapeSequences">
            <summary>
            Replace supported escape sequences with their equivalent character.
            <list type="table">
            <listheader>
             <term>Encoding</term>
             <description>Format</description>
            </listheader>
            <item><term>ASCII</term><description>X hex-digit hex-digit (ex: X2C)</description></item>
            <item><term>Unicode</term><description>U hex-digit hex-digit hex-digit hex-digit (ex: U00A9)</description></item>
            </list>
            </summary>
        </member>
        <member name="F:Xunit.Sdk.TestMethodDisplayOptions.ReplacePeriodWithComma">
            <summary>
            Replaces the period delimiter used in namespace and type references with a comma.
            </summary>
            <remarks>This option is only honored if the <see cref="F:Xunit.Sdk.TestMethodDisplay.ClassAndMethod"/> setting is also enabled.</remarks>
        </member>
        <member name="F:Xunit.Sdk.TestMethodDisplayOptions.All">
            <summary>
            Enables all method display options.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestMethodDisplayOptionsExtensions">
            <summary>
            Extension methods for <see cref="T:Xunit.Sdk.TestMethodDisplayOptions"/>
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestMethodDisplayOptionsExtensions.IsValid(Xunit.Sdk.TestMethodDisplayOptions)">
            <summary>
            Determines if the value is a valid enum value.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.RegisterXunitSerializerAttribute">
            <summary>
            Used to decorate xUnit.net test assemblies to register an external serializer for
            one or more supports types to serialize.
            </summary>
            <param name="serializerType">The type of the serializer. Must implement <see cref="T:Xunit.Sdk.IXunitSerializer"/>.</param>
            <param name="supportedTypesForSerialization">The types that are supported by the serializer.</param>
        </member>
        <member name="M:Xunit.Sdk.RegisterXunitSerializerAttribute.#ctor(System.Type,System.Type[])">
            <summary>
            Used to decorate xUnit.net test assemblies to register an external serializer for
            one or more supports types to serialize.
            </summary>
            <param name="serializerType">The type of the serializer. Must implement <see cref="T:Xunit.Sdk.IXunitSerializer"/>.</param>
            <param name="supportedTypesForSerialization">The types that are supported by the serializer.</param>
        </member>
        <member name="P:Xunit.Sdk.RegisterXunitSerializerAttribute.SerializerType">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.RegisterXunitSerializerAttribute.SupportedTypesForSerialization">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.SerializationHelper">
            <summary>
            Serializes and de-serializes objects. It supports a limited set of built-in types,
            as well as anything which implements <see cref="T:Xunit.Sdk.IXunitSerializable"/>. Custom serializers
            can implement <see cref="T:Xunit.Sdk.IXunitSerializer"/> and register by decorating the test
            assembly with <see cref="T:Xunit.Sdk.RegisterXunitSerializerAttribute"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.SerializationHelper"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.SerializationHelper.Instance">
            <summary>
            Gets the singleton instance of <see cref="T:Xunit.Sdk.SerializationHelper"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.AddRegisteredSerializers(System.Reflection.Assembly,System.Collections.Generic.List{System.String})">
            <summary>
            Add serializers that have been registered in the given assembly.
            </summary>
            <param name="assembly">The assembly to get registrations from</param>
            <param name="warnings">An optional collection to receive warnings generated during the registration</param>
            <remarks>
            The warnings collection will include warnings in the following circumstances:<br />
            * When the serializer type that does not implement <see cref="T:Xunit.Sdk.IXunitSerializer"/><br />
            * When the registration contains no support types to serialize<br />
            * When a supported type to serialize is duplicated with another serializer<br />
            * When a supported type is covered by a built-in serializer<br />
            * An exception is thrown while creating the serializer
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.AddSerializers(System.Collections.Generic.IReadOnlyCollection{Xunit.Sdk.IRegisterXunitSerializerAttribute},System.Collections.Generic.List{System.String})">
            <summary>
            Add serializers to the supported serializer list.
            </summary>
            <param name="registrations">The serialization registrations</param>
            <param name="warnings">An optional collection to receive warnings generated during the registration</param>
            <remarks>
            The warnings collection will include warnings in the following circumstances:<br />
            * When the serializer type that does not implement <see cref="T:Xunit.Sdk.IXunitSerializer"/><br />
            * When the registration contains no support types to serialize<br />
            * When a supported type to serialize is duplicated with another serializer<br />
            * When a supported type is covered by a built-in serializer<br />
            * An exception is thrown while creating the serializer
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.Deserialize``1(System.String)">
            <summary>
            De-serializes an object.
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <param name="serializedValue">The object's serialized value</param>
            <returns>The de-serialized object</returns>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.Deserialize(System.String)">
            <summary>
            De-serializes an object.
            </summary>
            <param name="serializedValue">The serialized value</param>
            <returns>The de-serialized object</returns>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.FindXunitSerializer(System.Type)">
            <summary>
            INTERNAL METHOD. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.IsSerializable(System.Object)">
            <summary>
            Determines if an object instance is serializable.
            </summary>
            <param name="value">The object to test for serializability.</param>
            <returns>Returns <c>true</c> if the object can be serialized; <c>false</c>, otherwise.</returns>
            <remarks>
            As <c>null</c> values always return <c>true</c>, even if the underlying type (which is unknown)
            might not be serializable, it's better to test via <see cref="M:Xunit.Sdk.SerializationHelper.IsSerializable(System.Object,System.Type)"/>
            whenever possible.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.IsSerializable(System.Object,System.Type)">
            <summary>
            Determines if a given type supports serialization.
            </summary>
            <param name="value">The object to test for serializability.</param>
            <param name="type">The type to test for serializability.</param>
            <returns>Returns <c>true</c> if objects of the given type can be serialized; <c>false</c>, otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.ResetInstance">
            <summary>
            THIS METHOD IS FOR INTERNAL PURPOSES ONLY. DO NOT CALL.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.Serialize(System.Object,System.Type)">
            <summary>
            Serializes an object.
            </summary>
            <param name="value">The value to be serialized</param>
            <param name="type">The type of the value to be serialized (cannot be <c>null</c> if <paramref name="value"/> is <c>null</c>)</param>
            <returns>The serialized object</returns>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.SerializedTypeNameToType(System.String)">
            <summary>
            Converts a type name (in "TypeName" format for mscorlib types, or "TypeName,AssemblyName" format for
            all others) into a <see cref="T:System.Type"/> object.
            </summary>
            <param name="assemblyQualifiedTypeName">The assembly qualified type name ("TypeName,AssemblyName")</param>
            <returns>The instance of the <see cref="T:System.Type"/>, if available; <c>null</c>, otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.TypeToSerializedTypeName(System.Type)">
            <summary>
            Gets an assembly qualified type name for serialization.
            </summary>
            <param name="value">The type to get the name for</param>
            <returns>A string in "TypeName" format (for mscorlib types) or "TypeName,AssemblyName" format (for all others)</returns>
        </member>
        <member name="M:Xunit.Sdk.EnumSerializer.Deserialize(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.EnumSerializer.IsSerializable(System.Type,System.Object,System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.EnumSerializer.Serialize(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitSerializableSerializer.Deserialize(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitSerializableSerializer.IsSerializable(System.Type,System.Object,System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitSerializableSerializer.Serialize(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.XunitSerializationInfo">
            <summary>
            Represents serialization information for serializing a complex object. This is typically
            used by objects which implement <see cref="T:Xunit.Sdk.IXunitSerializable"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitSerializationInfo.#ctor(Xunit.Sdk.SerializationHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitSerializationInfo"/> class
            for the purposes of serialization (starting empty).
            </summary>
            <param name="serializationHelper">The serialization helper</param>
        </member>
        <member name="M:Xunit.Sdk.XunitSerializationInfo.#ctor(Xunit.Sdk.SerializationHelper,Xunit.Sdk.IXunitSerializable)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitSerializationInfo"/> class
            for the purposes of serialization (starting populated by the given object).
            </summary>
            <param name="object">The data to copy into the serialization info</param>
            <param name="serializationHelper">The serialization helper</param>
        </member>
        <member name="M:Xunit.Sdk.XunitSerializationInfo.#ctor(Xunit.Sdk.SerializationHelper,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitSerializationInfo"/> class
            for the purposes of deserialization.
            </summary>
            <param name="serializationHelper">The serialization helper</param>
            <param name="serializedValue">The serialized value to copy into the serialization info</param>
        </member>
        <member name="M:Xunit.Sdk.XunitSerializationInfo.AddValue(System.String,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitSerializationInfo.GetValue(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitSerializationInfo.ToSerializedString">
            <summary>
            Returns a string that represents the entirety of the data.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.XunitSerializationInfoExtensions">
            <summary>
            Extension methods for <see cref="T:Xunit.Sdk.IXunitSerializationInfo"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitSerializationInfoExtensions.AddValue``1(Xunit.Sdk.IXunitSerializationInfo,System.String,``0)">
            <summary>
            Adds a value to the serialization. Supported value types include the built-in
            intrinsics (string, int, long, float, double, and decimal, including nullable
            versions of those), any class which implements <see cref="T:Xunit.Sdk.IXunitSerializable"/>),
            or arrays of any supported types.
            </summary>
            <param name="info"></param>
            <param name="key">The key to store the value with</param>
            <param name="value">The value to be stored</param>
        </member>
        <member name="M:Xunit.Sdk.XunitSerializationInfoExtensions.GetValue``1(Xunit.Sdk.IXunitSerializationInfo,System.String)">
            <summary>
            Gets a strongly-typed value from the serialization.
            </summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="info"></param>
            <param name="key">The key of the value to retrieve</param>
            <returns>The value, if present; default(T), otherwise</returns>
        </member>
        <member name="T:Xunit.Sdk.AnsiUtility">
            <summary>
            A utility class for ANSI color escape codes.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.AnsiUtility.AnsiEscapeCodeRegex">
            <summary>
            Gets a regular expression that can used to find ANSI color escape codes.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.AnsiUtility.RemoveAnsiEscapeCodes(System.String)">
            <summary>
            Strip ANSI color escape codes (in the form of <c>ESC[1;2m</c>) from a string value.
            </summary>
            <param name="message">The message that may contain ANSI color escape codes</param>
            <returns>The message without the ANSI color escape codes</returns>
        </member>
        <member name="T:Xunit.Sdk.AsyncUtility">
            <summary>
            Utility class for dealing with asynchronous operations.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.AsyncUtility.IsAsync(System.Reflection.MethodInfo)">
            <summary>
            Determines if the given method is async, as matters to xUnit.net. This means it either (a) returns
            a <see cref="T:System.Threading.Tasks.Task"/> or <see cref="T:System.Threading.Tasks.ValueTask"/>; or, (b) it is an F# function which was declared as
            async. Note that this is not the same thing as an "awaitable" method, since xUnit.net does not
            recreate the compiler's await machinery at runtime.
            </summary>
            <param name="method">The method to test</param>
            <returns>Returns <c>true</c> if the method is async; returns <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.AsyncUtility.IsAsyncVoid(System.Reflection.MethodInfo)">
            <summary>
            Determines if the given method is async void by looking for the <see cref="T:System.Runtime.CompilerServices.AsyncStateMachineAttribute"/>
            and <see cref="T:System.Void"/> return type on the method definition.
            </summary>
            <param name="method">The method to test</param>
            <returns>Returns <c>true</c> if the method is async void; returns <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.AsyncUtility.TryConvertToValueTask(System.Object)">
            <summary>
            Given an object, will attempt to convert instances of <see cref="T:System.Threading.Tasks.Task"/> or
            <see cref="T:Microsoft.FSharp.Control.FSharpAsync`1"/> into <see cref="T:System.Threading.Tasks.ValueTask"/>
            as appropriate. Will return <c>null</c> if the object is not a task of any supported type.
            Note that this list of supported tasks is purposefully identical to the list used
            by <see cref="M:Xunit.Sdk.AsyncUtility.IsAsync(System.Reflection.MethodInfo)"/>.
            </summary>
            <param name="obj">The object to convert</param>
            <returns>Returns a <see cref="T:System.Threading.Tasks.ValueTask"/> for the given object, if it's compatible;
            returns <c>null</c> otherwise.</returns>
        </member>
        <member name="T:Xunit.Sdk.DisposalTracker">
            <summary>
            Tracks disposable objects, and disposes them in the reverse order they were added to
            the tracker. Supports both <see cref="T:System.IDisposable"/> and <see cref="T:System.IAsyncDisposable"/>.
            You can either directly dispose this object (via <see cref="M:Xunit.Sdk.DisposalTracker.DisposeAsync"/>), or you
            can enumerate the items contained inside of it (via <see cref="P:Xunit.Sdk.DisposalTracker.TrackedObjects"/>).
            Also supports hand-registering disposal actions via <see cref="M:Xunit.Sdk.DisposalTracker.AddAction(System.Action)"/>
            and <see cref="M:Xunit.Sdk.DisposalTracker.AddAsyncAction(System.Func{System.Threading.Tasks.ValueTask})"/>. Note that an object implements both interfaces,
            this will *only* call <see cref="M:System.IAsyncDisposable.DisposeAsync"/> and will not
            call <see cref="M:System.IDisposable.Dispose"/>.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.DisposalTracker.TrackedObjects">
            <summary>
            Gets a list of the items that are currently being tracked.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.DisposalTracker.Add(System.Object)">
            <summary>
            Add an object to be disposed. It may optionally support <see cref="T:System.IDisposable"/>
            and/or <see cref="T:System.IAsyncDisposable"/>.
            </summary>
            <param name="object">The object to be disposed.</param>
        </member>
        <member name="M:Xunit.Sdk.DisposalTracker.AddAction(System.Action)">
            <summary>
            Add an action to the list of things to be done during disposal.
            </summary>
            <param name="cleanupAction">The cleanup action.</param>
        </member>
        <member name="M:Xunit.Sdk.DisposalTracker.AddAsyncAction(System.Func{System.Threading.Tasks.ValueTask})">
            <summary>
            Add an action to the list of things to be done during disposal.
            </summary>
            <param name="cleanupAction">The cleanup action.</param>
        </member>
        <member name="M:Xunit.Sdk.DisposalTracker.AddRange(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Add a collection of objects to be disposed. They may optionally support <see cref="T:System.IDisposable"/>
            and/or <see cref="T:System.IAsyncDisposable"/>.
            </summary>
            <param name="collection">The objects to be disposed.</param>
        </member>
        <member name="M:Xunit.Sdk.DisposalTracker.Clear">
            <summary>
            Removes all objects from the disposal tracker.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.DisposalTracker.DisposeAsync">
            <summary>
            Disposes all the objects that were added to the disposal tracker, in the reverse order
            of which they were added. For any object which implements both <see cref="T:System.IDisposable"/>
            and <see cref="T:System.IAsyncDisposable"/> we will favor <see cref="M:System.IAsyncDisposable.DisposeAsync"/>
            and not call <see cref="M:System.IDisposable.Dispose"/>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ExceptionUtility">
            <summary>
            Utility class for dealing with <see cref="T:System.Exception"/> and <see cref="T:Xunit.Sdk.IErrorMetadata"/> objects.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ExceptionUtility.CombineMessages(Xunit.Sdk.IErrorMetadata)">
            <summary>
            Combines multiple levels of messages into a single message.
            </summary>
            <param name="errorMetadata">The error metadata from which to get the messages.</param>
            <returns>The combined string.</returns>
        </member>
        <member name="M:Xunit.Sdk.ExceptionUtility.CombineStackTraces(Xunit.Sdk.IErrorMetadata)">
            <summary>
            Combines multiple levels of stack traces into a single stack trace.
            </summary>
            <param name="errorMetadata">The error metadata from which to get the stack traces.</param>
            <returns>The combined string.</returns>
        </member>
        <member name="M:Xunit.Sdk.ExceptionUtility.ExtractMetadata(System.Exception)">
            <summary>
            Unwraps exceptions and their inner exceptions.
            </summary>
            <param name="ex">The exception to be converted.</param>
            <returns>The error metadata.</returns>
        </member>
        <member name="T:Xunit.Sdk.NullMessageSink">
            <summary>
            An implementation of <see cref="T:Xunit.Sdk.IMessageSink"/> that ignores all messages.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.NullMessageSink.Instance">
            <summary>
            Gets the singleton null message sink instance.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.NullMessageSink.OnMessage(Xunit.Sdk.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.Randomizer">
            <summary>
            Wraps <see cref="T:System.Random"/> to provide access to the seed value, as well as
            the ability to reset the current randomizer with a new seed value.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.Randomizer.Current">
            <summary>
            Gets the current instance that returns random values based on the
            current <see cref="P:Xunit.Sdk.Randomizer.Seed"/> value.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.Randomizer.Seed">
            <summary>
            Gets the seed used to create the randomizer.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TypeHelper">
            <summary>
            Utility methods related to <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TypeHelper.ConvertArgument(System.Object,System.Type)">
            <summary>
            Converts an argument into its target type. Can be particularly useful when pulling attribute
            constructor arguments, whose types may not strictly match the parameter type.
            </summary>
            <param name="arg">The argument to be converted.</param>
            <param name="type">The target type for the conversion.</param>
            <returns>The converted argument.</returns>
        </member>
        <member name="M:Xunit.Sdk.TypeHelper.ConvertArguments(System.Object[],System.Type[])">
            <summary>
            Converts arguments into their target types. Can be particularly useful when pulling attribute
            constructor arguments, whose types may not strictly match the parameter types.
            </summary>
            <param name="args">The arguments to be converted.</param>
            <param name="types">The target types for the conversion.</param>
            <returns>The converted arguments.</returns>
        </member>
        <member name="M:Xunit.Sdk.TypeHelper.ConvertAttributeArgumentCollection(System.Collections.Generic.IReadOnlyCollection{System.Reflection.CustomAttributeTypedArgument},System.Type)">
            <summary>
            Converts an argument collection from an attribute initializer into an array of the raw values.
            </summary>
            <param name="collection">The attribute argument collection.</param>
            <param name="elementType">The element type of the array.</param>
            <returns>The collection of the raw attribute values.</returns>
        </member>
        <member name="M:Xunit.Sdk.TypeHelper.GetType(System.String)">
            <summary>
            Converts an assembly qualified type name from <see cref="M:Xunit.Sdk.TypeHelper.GetTypeName(System.Type)"/> back into
            a <see cref="T:System.Type"/> object.
            </summary>
            <param name="assemblyQualifiedTypeName">The assembly qualified type name.</param>
            <returns>The instance of the <see cref="T:System.Type"/>, if available; <c>null</c>, otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.TypeHelper.GetType(System.String,System.String)">
            <summary>
            Converts an assembly name + type name into a <see cref="T:System.Type"/> object.
            </summary>
            <param name="assemblyName">The assembly name.</param>
            <param name="typeName">The type name.</param>
            <returns>The instance of the <see cref="T:System.Type"/>, if available; <c>null</c>, otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.TypeHelper.GetTypeName(System.Type)">
            <summary>
            Gets an assembly-qualified type name suitable for serialization.
            </summary>
            <param name="value">The type value</param>
            <returns>A string in "TypeName" format (for mscorlib types) or "TypeName,AssemblyName" format (for all others)</returns>
            <remarks>
            Dynamic types, or types which live in the GAC, are not supported.
            </remarks>
        </member>
        <member name="M:Xunit.Sdk.TypeHelper.GetTypeStrict(System.String)">
            <summary>
            Converts an assembly qualified type name into a <see cref="T:System.Type"/> object. If the
            type does not exist, throws an <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="assemblyQualifiedTypeName">The assembly qualified type name.</param>
            <returns>The instance of the <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="T:Xunit.Sdk.UniqueIDGenerator">
            <summary>
            Generates unique IDs from multiple string inputs. Used to compute the unique
            IDs that are used inside the test framework.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.UniqueIDGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.UniqueIDGenerator"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.UniqueIDGenerator.Add(System.String)">
            <summary>
            Add a string value into the unique ID computation.
            </summary>
            <param name="value">The value to be added to the unique ID computation</param>
        </member>
        <member name="M:Xunit.Sdk.UniqueIDGenerator.Compute">
            <summary>
            Compute the unique ID for the given input values. Note that once the unique
            ID has been computed, no further <see cref="M:Xunit.Sdk.UniqueIDGenerator.Add(System.String)"/> operations will be allowed.
            </summary>
            <returns>The computed unique ID</returns>
        </member>
        <member name="M:Xunit.Sdk.UniqueIDGenerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.UniqueIDGenerator.ForAssembly(System.String,System.String)">
            <summary>
            Computes a unique ID for a test assembly.
            </summary>
            <param name="assemblyPath">The assembly path</param>
            <param name="configFilePath">The optional configuration file path</param>
            <returns>The computed unique ID for the assembly</returns>
        </member>
        <member name="M:Xunit.Sdk.UniqueIDGenerator.ForTest(System.String,System.Int32)">
            <summary>
            Computes a unique ID for a test.
            </summary>
            <param name="testCaseUniqueID">The unique ID of the test case that this test belongs to.</param>
            <param name="testIndex">The index of this test in the test case, typically starting with 0
            (though a negative number may be used to prevent collisions with legitimate test indices).</param>
        </member>
        <member name="M:Xunit.Sdk.UniqueIDGenerator.ForTestCase(System.String,System.Type[],System.Object[])">
            <summary>
            Computes a unique ID for a test case.
            </summary>
            <param name="parentUniqueID">The unique ID of the parent in the hierarchy; typically the test method
            unique ID, but may also be the test class or test collection unique ID, when test method (and
            possibly test class) don't exist.</param>
            <param name="testMethodGenericTypes">The test method's generic types</param>
            <param name="testMethodArguments">The test method's arguments</param>
            <returns>The computed unique ID for the test case</returns>
        </member>
        <member name="M:Xunit.Sdk.UniqueIDGenerator.ForTestClass(System.String,System.String)">
            <summary>
            Computes a unique ID for a test class.
            </summary>
            <param name="testCollectionUniqueID">The unique ID of the parent test collection for the test class</param>
            <param name="className">The optional fully qualified type name of the test class</param>
            <returns>The computed unique ID for the test class (may return <c>null</c> if <paramref name="className"/>
            is null)</returns>
        </member>
        <member name="M:Xunit.Sdk.UniqueIDGenerator.ForTestCollection(System.String,System.String,System.String)">
            <summary>
            Computes a unique ID for a test collection.
            </summary>
            <param name="assemblyUniqueID">The unique ID of the assembly the test collection lives in</param>
            <param name="collectionDisplayName">The display name of the test collection</param>
            <param name="collectionDefinitionClassName">The optional class name that contains the test collection definition</param>
            <returns>The computed unique ID for the test collection</returns>
        </member>
        <member name="M:Xunit.Sdk.UniqueIDGenerator.ForTestMethod(System.String,System.String)">
            <summary>
            Computes a unique ID for a test method.
            </summary>
            <param name="testClassUniqueID">The unique ID of the parent test class for the test method</param>
            <param name="methodName">The optional test method name</param>
            <returns>The computed unique ID for the test method (may return <c>null</c> if either the class
            unique ID or the method name is null)</returns>
        </member>
        <member name="M:Xunit.Sdk.UniqueIDGenerator.ForType(System.Type)">
            <summary>
            Computes a unique ID for a <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type to generate an ID for</param>
        </member>
        <member name="T:Xunit.Sdk.UnsetPropertiesException">
            <summary>
            An exception which indicates an object had several properties that were not properly initialized.
            </summary>
            <param name="propertyNames">The properties that were not set</param>
            <param name="type">The type that the property belongs to</param>
        </member>
        <member name="M:Xunit.Sdk.UnsetPropertiesException.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Type)">
            <summary>
            An exception which indicates an object had several properties that were not properly initialized.
            </summary>
            <param name="propertyNames">The properties that were not set</param>
            <param name="type">The type that the property belongs to</param>
        </member>
        <member name="P:Xunit.Sdk.UnsetPropertiesException.Message">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.UnsetPropertiesException.PropertyNames">
            <summary>
            Gets the property names of the uninitialized properties.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.UnsetPropertiesException.TypeName">
            <summary>
            Gets the type name of the uninitialized property.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.UnsetPropertyException">
            <summary>
            An exception which indicates an object was not properly initialized, thrown by a property
            getter that was accessed by the uninitialized object.
            </summary>
            <param name="propertyName">The property that was not set</param>
            <param name="type">The type that the property belongs to</param>
        </member>
        <member name="M:Xunit.Sdk.UnsetPropertyException.#ctor(System.String,System.Type)">
            <summary>
            An exception which indicates an object was not properly initialized, thrown by a property
            getter that was accessed by the uninitialized object.
            </summary>
            <param name="propertyName">The property that was not set</param>
            <param name="type">The type that the property belongs to</param>
        </member>
        <member name="P:Xunit.Sdk.UnsetPropertyException.Message">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.UnsetPropertyException.PropertyName">
            <summary>
            Gets the property name of the uninitialized property.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.UnsetPropertyException.TypeName">
            <summary>
            Gets the type name of the uninitialized property.
            </summary>
        </member>
        <member name="T:Xunit.Internal.AssemblyExtensions">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="F:Xunit.Internal.AssemblyExtensions.UnknownTargetFramework">
            <summary>
            Gets the value for an unknown target framework.
            </summary>
        </member>
        <member name="M:Xunit.Internal.AssemblyExtensions.GetLocalCodeBase(System.Reflection.Assembly)">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.AssemblyExtensions.GetLocalCodeBase(System.String,System.Char)">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.AssemblyExtensions.GetSafeCodeBase(System.Reflection.Assembly)">
            <summary>
            Safely gets the code base of an assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>If the assembly is null, or is dynamic, then it returns <c>null</c>; otherwise, it returns the value
            from <see cref="P:System.Reflection.Assembly.CodeBase"/>.</returns>
        </member>
        <member name="M:Xunit.Internal.AssemblyExtensions.GetSafeLocation(System.Reflection.Assembly)">
            <summary>
            Safely gets the location of an assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>If the assembly is null, or is dynamic, then it returns <c>null</c>; otherwise, it returns the value
            from <see cref="P:System.Reflection.Assembly.Location"/>.</returns>
        </member>
        <member name="M:Xunit.Internal.AssemblyExtensions.GetTargetFramework(System.Reflection.Assembly)">
            <summary>
            Gets the target framework name for the given assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>The target framework (typically in a format like ".NETFramework,Version=v4.7.2"
            or ".NETCoreApp,Version=v6.0"). If the target framework type is unknown (missing file,
            missing attribute, etc.) then returns "UnknownTargetFramework".</returns>
        </member>
        <member name="T:Xunit.Internal.DictionaryExtensions">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.DictionaryExtensions.Add``2(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.HashSet{``1}},``0,``1)">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.DictionaryExtensions.AddOrGet``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.DictionaryExtensions.AddOrGet``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``1})">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.DictionaryExtensions.AddRange``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.DictionaryExtensions.Contains``2(System.Collections.Generic.IReadOnlyDictionary{``0,System.Collections.Generic.IReadOnlyCollection{``1}},``0,``1,System.Collections.Generic.IEqualityComparer{``1})">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.DictionaryExtensions.ToReadOnly``2(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.HashSet{``1}})">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.DictionaryExtensions.ToReadOnly``2(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.List{``1}})">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.DictionaryExtensions.ToReadWrite``2(System.Collections.Generic.IReadOnlyDictionary{``0,System.Collections.Generic.IReadOnlyCollection{``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.DictionaryExtensions.TryAdd``2(System.Collections.Concurrent.ConcurrentDictionary{``0,System.Collections.Concurrent.ConcurrentBag{``1}},``0,``1)">
            <summary/>
        </member>
        <member name="T:Xunit.Internal.EnumerableExtensions">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.EnumerableExtensions.CastOrToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns <paramref name="source"/> as an array of <typeparamref name="T"/>, using a cast when
            available and <see cref="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})"/> when not.
            </summary>
        </member>
        <member name="M:Xunit.Internal.EnumerableExtensions.CastOrToList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns <paramref name="source"/> as a <see cref="T:System.Collections.Generic.List`1"/>, using a cast when
            available and <see cref="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})"/> when not.
            </summary>
        </member>
        <member name="M:Xunit.Internal.EnumerableExtensions.CastOrToReadOnlyCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns <paramref name="source"/> as an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> of <typeparamref name="T"/>,
            using a cast when available and <see cref="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})"/> when not.
            </summary>
        </member>
        <member name="M:Xunit.Internal.EnumerableExtensions.CastOrToReadOnlyList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns <paramref name="source"/> as an <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> of <typeparamref name="T"/>,
            using a cast when available and <see cref="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})"/> when not.
            </summary>
        </member>
        <member name="M:Xunit.Internal.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Enumerates all values in a collection, calling the callback for each.
            </summary>
        </member>
        <member name="M:Xunit.Internal.EnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns <paramref name="source"/> as an enumerable of <typeparamref name="T"/> with
            all the <c>null</c> items removed.
            </summary>
        </member>
        <member name="M:Xunit.Internal.EnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})">
            <summary>
            Returns <paramref name="source"/> as an enumerable of <typeparamref name="T"/> with
            all the <c>null</c> items removed.
            </summary>
        </member>
        <member name="M:Xunit.Internal.EnumerableExtensions.WhereNotNullOrWhitespace(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns <paramref name="source"/> with all the <c>null</c> or whitespace-only strings removed.
            </summary>
        </member>
        <member name="T:Xunit.Internal.EnumUtility">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.EnumUtility.ContainsValidFlags(System.Int32,System.Int32[])">
            <summary/>
        </member>
        <member name="T:Xunit.Internal.ExceptionExtensions">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.ExceptionExtensions.Unwrap(System.Exception)">
            <summary>
            Unwraps an exception to remove any wrappers, like <see cref="T:System.Reflection.TargetInvocationException"/>.
            </summary>
            <param name="ex">The exception to unwrap.</param>
            <returns>The unwrapped exception.</returns>
        </member>
        <member name="T:Xunit.Internal.Guard">
            <summary>
            Helper class for guarding value arguments and valid state.
            </summary>
        </member>
        <member name="M:Xunit.Internal.Guard.ArgumentEnumValid``1(``0,System.Collections.Generic.HashSet{``0},System.String)">
            <summary>
            Ensures that an enum value is valid by comparing against a list of valid values.
            </summary>
            <typeparam name="T">The argument type</typeparam>
            <param name="argValue">The value of the argument</param>
            <param name="validValues">The list of valid values</param>
            <param name="argName">The name of the argument</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Xunit.Internal.Guard.ArgumentNotNull``1(System.Nullable{``0},System.String)">
            <summary>
            Ensures that a nullable value type argument is not null.
            </summary>
            <typeparam name="T">The argument type</typeparam>
            <param name="argValue">The value of the argument</param>
            <param name="argName">The name of the argument</param>
            <returns>The argument value as a non-null value</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the argument is null</exception>
        </member>
        <member name="M:Xunit.Internal.Guard.ArgumentNotNull``1(``0,System.String)">
            <summary>
            Ensures that a nullable reference type argument is not null.
            </summary>
            <typeparam name="T">The argument type</typeparam>
            <param name="argValue">The value of the argument</param>
            <param name="argName">The name of the argument</param>
            <returns>The argument value as a non-null value</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the argument is null</exception>
        </member>
        <member name="M:Xunit.Internal.Guard.ArgumentNotNull``1(System.String,``0,System.String)">
            <summary>
            Ensures that a nullable reference type argument is not null.
            </summary>
            <typeparam name="T">The argument type</typeparam>
            <param name="message">The exception message to use when the argument is null</param>
            <param name="argValue">The value of the argument</param>
            <param name="argName">The name of the argument</param>
            <returns>The argument value as a non-null value</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the argument is null</exception>
        </member>
        <member name="M:Xunit.Internal.Guard.ArgumentNotNull``1(System.Func{System.String},``0,System.String)">
            <summary>
            Ensures that a nullable reference type argument is not null.
            </summary>
            <typeparam name="T">The argument type</typeparam>
            <param name="messageFunc">The creator for an exception message to use when the argument is null</param>
            <param name="argValue">The value of the argument</param>
            <param name="argName">The name of the argument</param>
            <returns>The argument value as a non-null value</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the argument is null</exception>
        </member>
        <member name="M:Xunit.Internal.Guard.ArgumentNotNullOrEmpty``1(``0,System.String)">
            <summary>
            Ensures that a nullable enumerable type argument is not null or empty.
            </summary>
            <typeparam name="T">The argument type</typeparam>
            <param name="argValue">The value of the argument</param>
            <param name="argName">The name of the argument</param>
            <returns>The argument value as a non-null, non-empty value</returns>
            <exception cref="T:System.ArgumentException">Thrown when the argument is null or empty</exception>
        </member>
        <member name="M:Xunit.Internal.Guard.ArgumentNotNullOrEmpty``1(System.String,``0,System.String)">
            <summary>
            Ensures that a nullable enumerable type argument is not null or empty.
            </summary>
            <typeparam name="T">The argument type</typeparam>
            <param name="message">The exception message to use when the argument is null or empty</param>
            <param name="argValue">The value of the argument</param>
            <param name="argName">The name of the argument</param>
            <returns>The argument value as a non-null, non-empty value</returns>
            <exception cref="T:System.ArgumentException">Thrown when the argument is null or empty</exception>
        </member>
        <member name="M:Xunit.Internal.Guard.ArgumentNotNullOrEmpty``1(System.Func{System.String},``0,System.String)">
            <summary>
            Ensures that a nullable enumerable type argument is not null or empty.
            </summary>
            <typeparam name="T">The argument type</typeparam>
            <param name="messageFunc">The creator for an exception message to use when the argument is null or empty</param>
            <param name="argValue">The value of the argument</param>
            <param name="argName">The name of the argument</param>
            <returns>The argument value as a non-null, non-empty value</returns>
            <exception cref="T:System.ArgumentException">Thrown when the argument is null or empty</exception>
        </member>
        <member name="M:Xunit.Internal.Guard.ArgumentValid(System.String,System.Boolean,System.String)">
            <summary>
            Ensures that an argument is valid.
            </summary>
            <param name="message">The exception message to use when the argument is not valid</param>
            <param name="test">The validity test value</param>
            <param name="argName">The name of the argument</param>
            <returns>The argument value as a non-null value</returns>
            <exception cref="T:System.ArgumentException">Thrown when the argument is not valid</exception>
        </member>
        <member name="M:Xunit.Internal.Guard.ArgumentValid(System.Func{System.String},System.Boolean,System.String)">
            <summary>
            Ensures that an argument is valid.
            </summary>
            <param name="messageFunc">The creator for an exception message to use when the argument is not valid</param>
            <param name="test">The validity test value</param>
            <param name="argName">The name of the argument</param>
            <returns>The argument value as a non-null value</returns>
            <exception cref="T:System.ArgumentException">Thrown when the argument is not valid</exception>
        </member>
        <member name="M:Xunit.Internal.Guard.FileExists(System.String,System.String)">
            <summary>
            Ensures that a filename argument is not null or empty, and that the file exists on disk.
            </summary>
            <param name="fileName">The file name value</param>
            <param name="argName">The name of the argument</param>
            <returns>The file name as a non-null value</returns>
            <exception cref="T:System.ArgumentException">Thrown when the argument is null, empty, or not on disk</exception>
        </member>
        <member name="M:Xunit.Internal.Guard.GenericArgumentNotNull``1(``0,System.String)">
            <summary>
            Ensures that a value is not default value. This is used for values of generic types
            where nullability is not known.
            </summary>
            <typeparam name="T">The argument type</typeparam>
            <param name="argValue">The value of the argument</param>
            <param name="argName">The name of the argument</param>
            <returns>The argument value as a non-default value</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the argument is default</exception>
        </member>
        <member name="M:Xunit.Internal.Guard.NotNull``1(System.String,``0)">
            <summary>
            Ensure that a reference value is not null.
            </summary>
            <typeparam name="T">The value type</typeparam>
            <param name="message">The exception message to use when the value is not valid</param>
            <param name="value">The value to test for null</param>
            <returns>The value as a non-null value</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the value is not valid</exception>
        </member>
        <member name="M:Xunit.Internal.Guard.NotNull``1(System.Func{System.String},``0)">
            <summary>
            Ensure that a reference value is not null.
            </summary>
            <typeparam name="T">The value type</typeparam>
            <param name="messageFunc">The creator for an exception message to use when the value is not valid</param>
            <param name="value">The value to test for null</param>
            <returns>The value as a non-null value</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the value is not valid</exception>
        </member>
        <member name="M:Xunit.Internal.Guard.NotNull``1(System.String,System.Nullable{``0})">
            <summary>
            Ensure that a nullable struct value is not null.
            </summary>
            <typeparam name="T">The value type</typeparam>
            <param name="message">The exception message to use when the value is not valid</param>
            <param name="value">The value to test for null</param>
            <returns>The value as a non-null value</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the value is not valid</exception>
        </member>
        <member name="M:Xunit.Internal.Guard.NotNull``1(System.Func{System.String},System.Nullable{``0})">
            <summary>
            Ensure that a nullable struct value is not null.
            </summary>
            <typeparam name="T">The value type</typeparam>
            <param name="messageFunc">The creator for an exception message to use when the value is not valid</param>
            <param name="value">The value to test for null</param>
            <returns>The value as a non-null value</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the value is not valid</exception>
        </member>
        <member name="T:Xunit.Internal.ObjectExtensions">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.ObjectExtensions.AsValueTask(System.Object)">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.ObjectExtensions.ValidateNullablePropertyValue``1(System.Object,``0,System.String)">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.ObjectExtensions.ValidateNullablePropertyValue``1(System.Object,System.Nullable{``0},System.String)">
            <summary/>
        </member>
        <member name="T:Xunit.Internal.StringExtensions">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.StringExtensions.Quoted(System.String)">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.StringExtensions.QuotedWithTrim(System.String,System.Nullable{System.Int32})">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.StringExtensions.SplitAtOuterCommas(System.String,System.Boolean)">
            <summary/>
        </member>
        <member name="T:Xunit.Internal.ArgumentFormatter">
            <summary>
            Formats value for display in assertion messages and data-driven test display names.
            </summary>
        </member>
        <member name="P:Xunit.Internal.ArgumentFormatter.Ellipsis">
            <summary>
            Gets the ellipsis value (three middle dots, aka U+00B7).
            </summary>
        </member>
        <member name="P:Xunit.Internal.ArgumentFormatter.MaxEnumerableLength">
            <summary>
            Gets the maximum number of values printed for collections before truncation.
            </summary>
        </member>
        <member name="P:Xunit.Internal.ArgumentFormatter.MaxObjectDepth">
            <summary>
            Gets the maximum printing depth, in terms of objects before truncation.
            </summary>
        </member>
        <member name="P:Xunit.Internal.ArgumentFormatter.MaxObjectMemberCount">
            <summary>
            Gets the maximum number of items (properties or fields) printed in an object before truncation.
            </summary>
        </member>
        <member name="P:Xunit.Internal.ArgumentFormatter.MaxStringLength">
            <summary>
            Gets the maximum strength length before truncation.
            </summary>
        </member>
        <member name="M:Xunit.Internal.ArgumentFormatter.EscapeString(System.String)">
            <summary>
            Escapes a string for printing, attempting to most closely model the value on how you would
            enter the value in a C# string literal. That means control codes that are normally backslash
            escaped (like "\n" for newline) are represented like that; all other control codes for ASCII
            values under 32 are printed as "\xnn".
            </summary>
            <param name="s">The string value to be escaped</param>
        </member>
        <member name="M:Xunit.Internal.ArgumentFormatter.Format(System.Object,System.Int32)">
            <summary>
            Formats a value for display.
            </summary>
            <param name="value">The value to be formatted</param>
            <param name="depth">The optional printing depth (1 indicates a top-level value)</param>
        </member>
        <member name="M:Xunit.Internal.ArgumentFormatter.FormatTypeName(System.Type,System.Boolean)">
            <summary>
            Formats a type. This maps built-in C# types to their C# native name (e.g., printing "int" instead
            of "Int32" or "System.Int32").
            </summary>
            <param name="type">The type to get the formatted name of</param>
            <param name="fullTypeName">Set to <c>true</c> to include the namespace; set to <c>false</c> for just the simple type name</param>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary/>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary/>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary/>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary/>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary/>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary/>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>
            Gets the identifier of the syntax used.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>
            Optional arguments associated with the specific syntax employed.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>
            The syntax identifier for strings containing composite formats for string formatting.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>
            The syntax identifier for strings containing date format specifiers.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>
            The syntax identifier for strings containing date and time format specifiers.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>
            The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>
            The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>
            The syntax identifier for strings containing JavaScript Object Notation (JSON).
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>
            The syntax identifier for strings containing numeric format specifiers.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>
            The syntax identifier for strings containing regular expressions.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>
            The syntax identifier for strings containing time format specifiers.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>
            The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>
            The syntax identifier for strings containing URIs.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>
            The syntax identifier for strings containing XML.
            </summary>
        </member>
    </members>
</doc>
